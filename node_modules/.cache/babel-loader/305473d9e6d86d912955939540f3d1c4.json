{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Neha\\\\Downloads\\\\react-20211103T194311Z-001\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Neha\\\\Downloads\\\\react-20211103T194311Z-001\\\\react\\\\src\\\\Waveform.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport './button.css';\nimport WaveSurfer from \"wavesurfer.js\";\n\nvar formWaveSurferOptions = function formWaveSurferOptions(ref) {\n  return {\n    container: ref,\n    waveColor: \"#eee\",\n    progressColor: \"OrangeRed\",\n    cursorColor: \"OrangeRed\",\n    barWidth: 3,\n    barRadius: 3,\n    responsive: true,\n    height: 150,\n    // If true, normalize by the maximum peak instead of 1.0.\n    normalize: true,\n    // Use the PeakCache to improve rendering speed of large waveforms.\n    partialRender: true\n  };\n};\n\nexport default function Waveform(_ref) {\n  var url = _ref.url;\n  var waveformRef = useRef(null);\n  var wavesurfer = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      playing = _useState2[0],\n      setPlay = _useState2[1];\n\n  var _useState3 = useState(0.5),\n      _useState4 = _slicedToArray(_useState3, 2),\n      volume = _useState4[0],\n      setVolume = _useState4[1]; // create new WaveSurfer instance\n  // On component mount and when url changes\n\n\n  useEffect(function () {\n    setPlay(false);\n    var options = formWaveSurferOptions(waveformRef.current);\n    wavesurfer.current = WaveSurfer.create(options);\n    wavesurfer.current.load(url);\n    wavesurfer.current.on(\"ready\", function () {\n      // https://wavesurfer-js.org/docs/methods.html\n      // wavesurfer.current.play();\n      // setPlay(true);\n      // make sure object stillavailable when file loaded\n      if (wavesurfer.current) {\n        wavesurfer.current.setVolume(volume);\n        setVolume(volume);\n      }\n    }); // Removes events, elements and disconnects Web Audio nodes.\n    // when component unmount\n\n    return function () {\n      return wavesurfer.current.destroy();\n    };\n  }, [url]);\n\n  var handlePlayPause = function handlePlayPause() {\n    setPlay(!playing);\n    wavesurfer.current.playPause();\n  };\n\n  var onVolumeChange = function onVolumeChange(e) {\n    var target = e.target;\n    var newVolume = +target.value;\n\n    if (newVolume) {\n      setVolume(newVolume);\n      wavesurfer.current.setVolume(newVolume || 1);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"waveform\",\n    ref: waveformRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handlePlayPause,\n    className: !playing ? 'btn-play' : 'btn-stop',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    id: \"volume\",\n    name: \"volume\" // waveSurfer recognize value of `0` same as `1`\n    //  so we need to set some zero-ish value for silence\n    ,\n    min: \"0.01\",\n    max: \"1\",\n    step: \".025\",\n    onChange: onVolumeChange,\n    defaultValue: volume,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"volume\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Volume\")));\n}","map":{"version":3,"sources":["C:/Users/Neha/Downloads/react-20211103T194311Z-001/react/src/Waveform.js"],"names":["React","useEffect","useRef","useState","WaveSurfer","formWaveSurferOptions","ref","container","waveColor","progressColor","cursorColor","barWidth","barRadius","responsive","height","normalize","partialRender","Waveform","url","waveformRef","wavesurfer","playing","setPlay","volume","setVolume","options","current","create","load","on","destroy","handlePlayPause","playPause","onVolumeChange","e","target","newVolume","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport './button.css'\n\nimport WaveSurfer from \"wavesurfer.js\";\n\nconst formWaveSurferOptions = ref => ({\n  container: ref,\n  waveColor: \"#eee\",\n  progressColor: \"OrangeRed\",\n  cursorColor: \"OrangeRed\",\n  barWidth: 3,\n  barRadius: 3,\n  responsive: true,\n  height: 150,\n  // If true, normalize by the maximum peak instead of 1.0.\n  normalize: true,\n  // Use the PeakCache to improve rendering speed of large waveforms.\n  partialRender: true\n});\n\nexport default function Waveform({ url }) {\n  const waveformRef = useRef(null);\n  const wavesurfer = useRef(null);\n  const [playing, setPlay] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n\n  // create new WaveSurfer instance\n  // On component mount and when url changes\n  useEffect(() => {\n    setPlay(false);\n\n    const options = formWaveSurferOptions(waveformRef.current);\n    wavesurfer.current = WaveSurfer.create(options);\n\n    wavesurfer.current.load(url);\n\n    wavesurfer.current.on(\"ready\", function() {\n      // https://wavesurfer-js.org/docs/methods.html\n      // wavesurfer.current.play();\n      // setPlay(true);\n\n      // make sure object stillavailable when file loaded\n      if (wavesurfer.current) {\n        wavesurfer.current.setVolume(volume);\n        setVolume(volume);\n      }\n    });\n\n    // Removes events, elements and disconnects Web Audio nodes.\n    // when component unmount\n    return () => wavesurfer.current.destroy();\n  }, [url]);\n\n  const handlePlayPause = () => {\n    setPlay(!playing);\n    wavesurfer.current.playPause();\n  };\n\n  const onVolumeChange = e => {\n    const { target } = e;\n    const newVolume = +target.value;\n\n    if (newVolume) {\n      setVolume(newVolume);\n      wavesurfer.current.setVolume(newVolume || 1);\n    }\n  };\n\n  return (\n    <div>\n      <div id=\"waveform\" ref={waveformRef} />\n      <div className=\"controls\">\n        <div onClick={handlePlayPause} className={!playing ? 'btn-play' : 'btn-stop'}></div>\n        <input\n          type=\"range\"\n          id=\"volume\"\n          name=\"volume\"\n          // waveSurfer recognize value of `0` same as `1`\n          //  so we need to set some zero-ish value for silence\n          min=\"0.01\"\n          max=\"1\"\n          step=\".025\"\n          onChange={onVolumeChange}\n          defaultValue={volume}\n        />\n        <label htmlFor=\"volume\">Volume</label>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}