{"ast":null,"code":"/*!\n * wavesurfer.js 4.0.1 (2020-06-24)\n * https://github.com/katspaugh/wavesurfer.js\n * @license BSD-3-Clause\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"WaveSurfer\", [], factory);else if (typeof exports === 'object') exports[\"WaveSurfer\"] = factory();else root[\"WaveSurfer\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = \"./src/wavesurfer.js\");\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ({\n      /***/\n      \"./node_modules/debounce/index.js\":\n      /*!****************************************!*\\\n        !*** ./node_modules/debounce/index.js ***!\n        \\****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesDebounceIndexJs(module, exports) {\n        /**\n         * Returns a function, that, as long as it continues to be invoked, will not\n         * be triggered. The function will be called after it stops being called for\n         * N milliseconds. If `immediate` is passed, trigger the function on the\n         * leading edge, instead of the trailing. The function also has a property 'clear' \n         * that is a function which will clear the timer to prevent previously scheduled executions. \n         *\n         * @source underscore.js\n         * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n         * @param {Function} function to wrap\n         * @param {Number} timeout in ms (`100`)\n         * @param {Boolean} whether to execute at the beginning (`false`)\n         * @api public\n         */\n        function debounce(func, wait, immediate) {\n          var timeout, args, context, timestamp, result;\n          if (null == wait) wait = 100;\n\n          function later() {\n            var last = Date.now() - timestamp;\n\n            if (last < wait && last >= 0) {\n              timeout = setTimeout(later, wait - last);\n            } else {\n              timeout = null;\n\n              if (!immediate) {\n                result = func.apply(context, args);\n                context = args = null;\n              }\n            }\n          }\n\n          ;\n\n          var debounced = function debounced() {\n            context = this;\n            args = arguments;\n            timestamp = Date.now();\n            var callNow = immediate && !timeout;\n            if (!timeout) timeout = setTimeout(later, wait);\n\n            if (callNow) {\n              result = func.apply(context, args);\n              context = args = null;\n            }\n\n            return result;\n          };\n\n          debounced.clear = function () {\n            if (timeout) {\n              clearTimeout(timeout);\n              timeout = null;\n            }\n          };\n\n          debounced.flush = function () {\n            if (timeout) {\n              result = func.apply(context, args);\n              context = args = null;\n              clearTimeout(timeout);\n              timeout = null;\n            }\n          };\n\n          return debounced;\n        }\n\n        ; // Adds compatibility for ES modules\n\n        debounce.debounce = debounce;\n        module.exports = debounce;\n        /***/\n      },\n\n      /***/\n      \"./src/drawer.canvasentry.js\":\n      /*!***********************************!*\\\n        !*** ./src/drawer.canvasentry.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcDrawerCanvasentryJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _style = _interopRequireDefault(__webpack_require__(\n        /*! ./util/style */\n        \"./src/util/style.js\"));\n\n        var _getId = _interopRequireDefault(__webpack_require__(\n        /*! ./util/get-id */\n        \"./src/util/get-id.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n         * and an (optional) progress wave `canvas`.\n         *\n         * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n         * render a waveform, depending on the zoom level.\n         */\n\n\n        var CanvasEntry = /*#__PURE__*/function () {\n          function CanvasEntry() {\n            _classCallCheck(this, CanvasEntry);\n            /**\n             * The wave node\n             *\n             * @type {HTMLCanvasElement}\n             */\n\n\n            this.wave = null;\n            /**\n             * The wave canvas rendering context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n\n            this.waveCtx = null;\n            /**\n             * The (optional) progress wave node\n             *\n             * @type {HTMLCanvasElement}\n             */\n\n            this.progress = null;\n            /**\n             * The (optional) progress wave canvas rendering context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n\n            this.progressCtx = null;\n            /**\n             * Start of the area the canvas should render, between 0 and 1\n             *\n             * @type {number}\n             */\n\n            this.start = 0;\n            /**\n             * End of the area the canvas should render, between 0 and 1\n             *\n             * @type {number}\n             */\n\n            this.end = 1;\n            /**\n             * Unique identifier for this entry\n             *\n             * @type {string}\n             */\n\n            this.id = (0, _getId.default)(typeof this.constructor.name !== 'undefined' ? this.constructor.name.toLowerCase() + '_' : 'canvasentry_');\n            /**\n             * Canvas 2d context attributes\n             *\n             * @type {object}\n             */\n\n            this.canvasContextAttributes = {};\n          }\n          /**\n           * Store the wave canvas element and create the 2D rendering context\n           *\n           * @param {HTMLCanvasElement} element The wave `canvas` element.\n           */\n\n\n          _createClass(CanvasEntry, [{\n            key: \"initWave\",\n            value: function initWave(element) {\n              this.wave = element;\n              this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n            }\n            /**\n             * Store the progress wave canvas element and create the 2D rendering\n             * context\n             *\n             * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n             */\n\n          }, {\n            key: \"initProgress\",\n            value: function initProgress(element) {\n              this.progress = element;\n              this.progressCtx = this.progress.getContext('2d', this.canvasContextAttributes);\n            }\n            /**\n             * Update the dimensions\n             *\n             * @param {number} elementWidth Width of the entry\n             * @param {number} totalWidth Total width of the multi canvas renderer\n             * @param {number} width The new width of the element\n             * @param {number} height The new height of the element\n             */\n\n          }, {\n            key: \"updateDimensions\",\n            value: function updateDimensions(elementWidth, totalWidth, width, height) {\n              // where the canvas starts and ends in the waveform, represented as a\n              // decimal between 0 and 1\n              this.start = this.wave.offsetLeft / totalWidth || 0;\n              this.end = this.start + elementWidth / totalWidth; // set wave canvas dimensions\n\n              this.wave.width = width;\n              this.wave.height = height;\n              var elementSize = {\n                width: elementWidth + 'px'\n              };\n              (0, _style.default)(this.wave, elementSize);\n\n              if (this.hasProgressCanvas) {\n                // set progress canvas dimensions\n                this.progress.width = width;\n                this.progress.height = height;\n                (0, _style.default)(this.progress, elementSize);\n              }\n            }\n            /**\n             * Clear the wave and progress rendering contexts\n             */\n\n          }, {\n            key: \"clearWave\",\n            value: function clearWave() {\n              // wave\n              this.waveCtx.clearRect(0, 0, this.waveCtx.canvas.width, this.waveCtx.canvas.height); // progress\n\n              if (this.hasProgressCanvas) {\n                this.progressCtx.clearRect(0, 0, this.progressCtx.canvas.width, this.progressCtx.canvas.height);\n              }\n            }\n            /**\n             * Set the fill styles for wave and progress\n             *\n             * @param {string} waveColor Fill color for the wave canvas\n             * @param {?string} progressColor Fill color for the progress canvas\n             */\n\n          }, {\n            key: \"setFillStyles\",\n            value: function setFillStyles(waveColor, progressColor) {\n              this.waveCtx.fillStyle = waveColor;\n\n              if (this.hasProgressCanvas) {\n                this.progressCtx.fillStyle = progressColor;\n              }\n            }\n            /**\n             * Draw a rectangle for wave and progress\n             *\n             * @param {number} x X start position\n             * @param {number} y Y start position\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             */\n\n          }, {\n            key: \"fillRects\",\n            value: function fillRects(x, y, width, height, radius) {\n              this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n              if (this.hasProgressCanvas) {\n                this.fillRectToContext(this.progressCtx, x, y, width, height, radius);\n              }\n            }\n            /**\n             * Draw the actual rectangle on a `canvas` element\n             *\n             * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n             * @param {number} x X start position\n             * @param {number} y Y start position\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             */\n\n          }, {\n            key: \"fillRectToContext\",\n            value: function fillRectToContext(ctx, x, y, width, height, radius) {\n              if (!ctx) {\n                return;\n              }\n\n              if (radius) {\n                this.drawRoundedRect(ctx, x, y, width, height, radius);\n              } else {\n                ctx.fillRect(x, y, width, height);\n              }\n            }\n            /**\n             * Draw a rounded rectangle on Canvas\n             *\n             * @param {CanvasRenderingContext2D} ctx Canvas context\n             * @param {number} x X-position of the rectangle\n             * @param {number} y Y-position of the rectangle\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             *\n             * @return {void}\n             * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n             */\n\n          }, {\n            key: \"drawRoundedRect\",\n            value: function drawRoundedRect(ctx, x, y, width, height, radius) {\n              if (height === 0) {\n                return;\n              } // peaks are float values from -1 to 1. Use absolute height values in\n              // order to correctly calculate rounded rectangle coordinates\n\n\n              if (height < 0) {\n                height *= -1;\n                y -= height;\n              }\n\n              ctx.beginPath();\n              ctx.moveTo(x + radius, y);\n              ctx.lineTo(x + width - radius, y);\n              ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n              ctx.lineTo(x + width, y + height - radius);\n              ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n              ctx.lineTo(x + radius, y + height);\n              ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n              ctx.lineTo(x, y + radius);\n              ctx.quadraticCurveTo(x, y, x + radius, y);\n              ctx.closePath();\n              ctx.fill();\n            }\n            /**\n             * Render the actual wave and progress lines\n             *\n             * @param {number[]} peaks Array with peaks data\n             * @param {number} absmax Maximum peak value (absolute)\n             * @param {number} halfH Half the height of the waveform\n             * @param {number} offsetY Offset to the top\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that\n             * should be rendered\n             */\n\n          }, {\n            key: \"drawLines\",\n            value: function drawLines(peaks, absmax, halfH, offsetY, start, end) {\n              this.drawLineToContext(this.waveCtx, peaks, absmax, halfH, offsetY, start, end);\n\n              if (this.hasProgressCanvas) {\n                this.drawLineToContext(this.progressCtx, peaks, absmax, halfH, offsetY, start, end);\n              }\n            }\n            /**\n             * Render the actual waveform line on a `canvas` element\n             *\n             * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n             * @param {number[]} peaks Array with peaks data\n             * @param {number} absmax Maximum peak value (absolute)\n             * @param {number} halfH Half the height of the waveform\n             * @param {number} offsetY Offset to the top\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that\n             * should be rendered\n             */\n\n          }, {\n            key: \"drawLineToContext\",\n            value: function drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n              if (!ctx) {\n                return;\n              }\n\n              var length = peaks.length / 2;\n              var first = Math.round(length * this.start); // use one more peak value to make sure we join peaks at ends -- unless,\n              // of course, this is the last canvas\n\n              var last = Math.round(length * this.end) + 1;\n              var canvasStart = first;\n              var canvasEnd = last;\n              var scale = this.wave.width / (canvasEnd - canvasStart - 1); // optimization\n\n              var halfOffset = halfH + offsetY;\n              var absmaxHalf = absmax / halfH;\n              ctx.beginPath();\n              ctx.moveTo((canvasStart - first) * scale, halfOffset);\n              ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf));\n              var i, peak, h;\n\n              for (i = canvasStart; i < canvasEnd; i++) {\n                peak = peaks[2 * i] || 0;\n                h = Math.round(peak / absmaxHalf);\n                ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n              } // draw the bottom edge going backwards, to make a single\n              // closed hull to fill\n\n\n              var j = canvasEnd - 1;\n\n              for (j; j >= canvasStart; j--) {\n                peak = peaks[2 * j + 1] || 0;\n                h = Math.round(peak / absmaxHalf);\n                ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n              }\n\n              ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf));\n              ctx.closePath();\n              ctx.fill();\n            }\n            /**\n             * Destroys this entry\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.waveCtx = null;\n              this.wave = null;\n              this.progressCtx = null;\n              this.progress = null;\n            }\n            /**\n             * Return image data of the wave `canvas` element\n             *\n             * When using a `type` of `'blob'`, this will return a `Promise` that\n             * resolves with a `Blob` instance.\n             *\n             * @param {string} format='image/png' An optional value of a format type.\n             * @param {number} quality=0.92 An optional value between 0 and 1.\n             * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n             * @return {string|Promise} When using the default `'dataURL'` `type` this\n             * returns a data URL. When using the `'blob'` `type` this returns a\n             * `Promise` that resolves with a `Blob` instance.\n             */\n\n          }, {\n            key: \"getImage\",\n            value: function getImage(format, quality, type) {\n              var _this = this;\n\n              if (type === 'blob') {\n                return new Promise(function (resolve) {\n                  _this.wave.toBlob(resolve, format, quality);\n                });\n              } else if (type === 'dataURL') {\n                return this.wave.toDataURL(format, quality);\n              }\n            }\n          }]);\n\n          return CanvasEntry;\n        }();\n\n        exports.default = CanvasEntry;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/drawer.js\":\n      /*!***********************!*\\\n        !*** ./src/drawer.js ***!\n        \\***********************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcDrawerJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * Parent class for renderers\n         *\n         * @extends {Observer}\n         */\n\n\n        var Drawer = /*#__PURE__*/function (_util$Observer) {\n          _inherits(Drawer, _util$Observer);\n          /**\n           * @param {HTMLElement} container The container node of the wavesurfer instance\n           * @param {WavesurferParams} params The wavesurfer initialisation options\n           */\n\n\n          function Drawer(container, params) {\n            var _this;\n\n            _classCallCheck(this, Drawer);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(Drawer).call(this));\n            _this.container = container;\n            /**\n             * @type {WavesurferParams}\n             */\n\n            _this.params = params;\n            /**\n             * The width of the renderer\n             * @type {number}\n             */\n\n            _this.width = 0;\n            /**\n             * The height of the renderer\n             * @type {number}\n             */\n\n            _this.height = params.height * _this.params.pixelRatio;\n            _this.lastPos = 0;\n            /**\n             * The `<wave>` element which is added to the container\n             * @type {HTMLElement}\n             */\n\n            _this.wrapper = null;\n            return _this;\n          }\n          /**\n           * Alias of `util.style`\n           *\n           * @param {HTMLElement} el The element that the styles will be applied to\n           * @param {Object} styles The map of propName: attribute, both are used as-is\n           * @return {HTMLElement} el\n           */\n\n\n          _createClass(Drawer, [{\n            key: \"style\",\n            value: function style(el, styles) {\n              return util.style(el, styles);\n            }\n            /**\n             * Create the wrapper `<wave>` element, style it and set up the events for\n             * interaction\n             */\n\n          }, {\n            key: \"createWrapper\",\n            value: function createWrapper() {\n              this.wrapper = this.container.appendChild(document.createElement('wave'));\n              this.style(this.wrapper, {\n                display: 'block',\n                position: 'relative',\n                userSelect: 'none',\n                webkitUserSelect: 'none',\n                height: this.params.height + 'px'\n              });\n\n              if (this.params.fillParent || this.params.scrollParent) {\n                this.style(this.wrapper, {\n                  width: '100%',\n                  overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                  overflowY: 'hidden'\n                });\n              }\n\n              this.setupWrapperEvents();\n            }\n            /**\n             * Handle click event\n             *\n             * @param {Event} e Click event\n             * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n             * @return {number} Playback position from 0 to 1\n             */\n\n          }, {\n            key: \"handleEvent\",\n            value: function handleEvent(e, noPrevent) {\n              !noPrevent && e.preventDefault();\n              var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\n              var bbox = this.wrapper.getBoundingClientRect();\n              var nominalWidth = this.width;\n              var parentWidth = this.getWidth();\n              var progress;\n\n              if (!this.params.fillParent && nominalWidth < parentWidth) {\n                progress = (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) * (this.params.pixelRatio / nominalWidth) || 0;\n\n                if (progress > 1) {\n                  progress = 1;\n                }\n              } else {\n                progress = ((this.params.rtl ? bbox.right - clientX : clientX - bbox.left) + this.wrapper.scrollLeft) / this.wrapper.scrollWidth || 0;\n              }\n\n              return progress;\n            }\n          }, {\n            key: \"setupWrapperEvents\",\n            value: function setupWrapperEvents() {\n              var _this2 = this;\n\n              this.wrapper.addEventListener('click', function (e) {\n                var scrollbarHeight = _this2.wrapper.offsetHeight - _this2.wrapper.clientHeight;\n\n                if (scrollbarHeight !== 0) {\n                  // scrollbar is visible.  Check if click was on it\n                  var bbox = _this2.wrapper.getBoundingClientRect();\n\n                  if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                  }\n                }\n\n                if (_this2.params.interact) {\n                  _this2.fireEvent('click', e, _this2.handleEvent(e));\n                }\n              });\n              this.wrapper.addEventListener('dblclick', function (e) {\n                if (_this2.params.interact) {\n                  _this2.fireEvent('dblclick', e, _this2.handleEvent(e));\n                }\n              });\n              this.wrapper.addEventListener('scroll', function (e) {\n                return _this2.fireEvent('scroll', e);\n              });\n            }\n            /**\n             * Draw peaks on the canvas\n             *\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n             * for split channel rendering\n             * @param {number} length The width of the area that should be drawn\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             */\n\n          }, {\n            key: \"drawPeaks\",\n            value: function drawPeaks(peaks, length, start, end) {\n              if (!this.setWidth(length)) {\n                this.clearWave();\n              }\n\n              this.params.barWidth ? this.drawBars(peaks, 0, start, end) : this.drawWave(peaks, 0, start, end);\n            }\n            /**\n             * Scroll to the beginning\n             */\n\n          }, {\n            key: \"resetScroll\",\n            value: function resetScroll() {\n              if (this.wrapper !== null) {\n                this.wrapper.scrollLeft = 0;\n              }\n            }\n            /**\n             * Recenter the view-port at a certain percent of the waveform\n             *\n             * @param {number} percent Value from 0 to 1 on the waveform\n             */\n\n          }, {\n            key: \"recenter\",\n            value: function recenter(percent) {\n              var position = this.wrapper.scrollWidth * percent;\n              this.recenterOnPosition(position, true);\n            }\n            /**\n             * Recenter the view-port on a position, either scroll there immediately or\n             * in steps of 5 pixels\n             *\n             * @param {number} position X-offset in pixels\n             * @param {boolean} immediate Set to true to immediately scroll somewhere\n             */\n\n          }, {\n            key: \"recenterOnPosition\",\n            value: function recenterOnPosition(position, immediate) {\n              var scrollLeft = this.wrapper.scrollLeft;\n              var half = ~~(this.wrapper.clientWidth / 2);\n              var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n              var target = position - half;\n              var offset = target - scrollLeft;\n\n              if (maxScroll == 0) {\n                // no need to continue if scrollbar is not there\n                return;\n              } // if the cursor is currently visible...\n\n\n              if (!immediate && -half <= offset && offset < half) {\n                // set rate at which waveform is centered\n                var rate = this.params.autoCenterRate; // make rate depend on width of view and length of waveform\n\n                rate /= half;\n                rate *= maxScroll;\n                offset = Math.max(-rate, Math.min(rate, offset));\n                target = scrollLeft + offset;\n              } // limit target to valid range (0 to maxScroll)\n\n\n              target = Math.max(0, Math.min(maxScroll, target)); // no use attempting to scroll if we're not moving\n\n              if (target != scrollLeft) {\n                this.wrapper.scrollLeft = target;\n              }\n            }\n            /**\n             * Get the current scroll position in pixels\n             *\n             * @return {number} Horizontal scroll position in pixels\n             */\n\n          }, {\n            key: \"getScrollX\",\n            value: function getScrollX() {\n              var x = 0;\n\n              if (this.wrapper) {\n                var pixelRatio = this.params.pixelRatio;\n                x = Math.round(this.wrapper.scrollLeft * pixelRatio); // In cases of elastic scroll (safari with mouse wheel) you can\n                // scroll beyond the limits of the container\n                // Calculate and floor the scrollable extent to make sure an out\n                // of bounds value is not returned\n                // Ticket #1312\n\n                if (this.params.scrollParent) {\n                  var maxScroll = ~~(this.wrapper.scrollWidth * pixelRatio - this.getWidth());\n                  x = Math.min(maxScroll, Math.max(0, x));\n                }\n              }\n\n              return x;\n            }\n            /**\n             * Get the width of the container\n             *\n             * @return {number} The width of the container\n             */\n\n          }, {\n            key: \"getWidth\",\n            value: function getWidth() {\n              return Math.round(this.container.clientWidth * this.params.pixelRatio);\n            }\n            /**\n             * Set the width of the container\n             *\n             * @param {number} width The new width of the container\n             * @return {boolean} Whether the width of the container was updated or not\n             */\n\n          }, {\n            key: \"setWidth\",\n            value: function setWidth(width) {\n              if (this.width == width) {\n                return false;\n              }\n\n              this.width = width;\n\n              if (this.params.fillParent || this.params.scrollParent) {\n                this.style(this.wrapper, {\n                  width: ''\n                });\n              } else {\n                this.style(this.wrapper, {\n                  width: ~~(this.width / this.params.pixelRatio) + 'px'\n                });\n              }\n\n              this.updateSize();\n              return true;\n            }\n            /**\n             * Set the height of the container\n             *\n             * @param {number} height The new height of the container.\n             * @return {boolean} Whether the height of the container was updated or not\n             */\n\n          }, {\n            key: \"setHeight\",\n            value: function setHeight(height) {\n              if (height == this.height) {\n                return false;\n              }\n\n              this.height = height;\n              this.style(this.wrapper, {\n                height: ~~(this.height / this.params.pixelRatio) + 'px'\n              });\n              this.updateSize();\n              return true;\n            }\n            /**\n             * Called by wavesurfer when progress should be rendered\n             *\n             * @param {number} progress From 0 to 1\n             */\n\n          }, {\n            key: \"progress\",\n            value: function progress(_progress) {\n              var minPxDelta = 1 / this.params.pixelRatio;\n              var pos = Math.round(_progress * this.width) * minPxDelta;\n\n              if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n                this.lastPos = pos;\n\n                if (this.params.scrollParent && this.params.autoCenter) {\n                  var newPos = ~~(this.wrapper.scrollWidth * _progress);\n                  this.recenterOnPosition(newPos, this.params.autoCenterImmediately);\n                }\n\n                this.updateProgress(pos);\n              }\n            }\n            /**\n             * This is called when wavesurfer is destroyed\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.unAll();\n\n              if (this.wrapper) {\n                if (this.wrapper.parentNode == this.container) {\n                  this.container.removeChild(this.wrapper);\n                }\n\n                this.wrapper = null;\n              }\n            }\n            /* Renderer-specific methods */\n\n            /**\n             * Called after cursor related params have changed.\n             *\n             * @abstract\n             */\n\n          }, {\n            key: \"updateCursor\",\n            value: function updateCursor() {}\n            /**\n             * Called when the size of the container changes so the renderer can adjust\n             *\n             * @abstract\n             */\n\n          }, {\n            key: \"updateSize\",\n            value: function updateSize() {}\n            /**\n             * Draw a waveform with bars\n             *\n             * @abstract\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n             * rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             */\n\n          }, {\n            key: \"drawBars\",\n            value: function drawBars(peaks, channelIndex, start, end) {}\n            /**\n             * Draw a waveform\n             *\n             * @abstract\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n             * rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             */\n\n          }, {\n            key: \"drawWave\",\n            value: function drawWave(peaks, channelIndex, start, end) {}\n            /**\n             * Clear the waveform\n             *\n             * @abstract\n             */\n\n          }, {\n            key: \"clearWave\",\n            value: function clearWave() {}\n            /**\n             * Render the new progress\n             *\n             * @abstract\n             * @param {number} position X-Offset of progress position in pixels\n             */\n\n          }, {\n            key: \"updateProgress\",\n            value: function updateProgress(position) {}\n          }]);\n\n          return Drawer;\n        }(util.Observer);\n\n        exports.default = Drawer;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/drawer.multicanvas.js\":\n      /*!***********************************!*\\\n        !*** ./src/drawer.multicanvas.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcDrawerMulticanvasJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _drawer = _interopRequireDefault(__webpack_require__(\n        /*! ./drawer */\n        \"./src/drawer.js\"));\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        var _drawer2 = _interopRequireDefault(__webpack_require__(\n        /*! ./drawer.canvasentry */\n        \"./src/drawer.canvasentry.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n         * builtin renderer.\n         *\n         * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n         * on the zoom level.\n         */\n\n\n        var MultiCanvas = /*#__PURE__*/function (_Drawer) {\n          _inherits(MultiCanvas, _Drawer);\n          /**\n           * @param {HTMLElement} container The container node of the wavesurfer instance\n           * @param {WavesurferParams} params The wavesurfer initialisation options\n           */\n\n\n          function MultiCanvas(container, params) {\n            var _this;\n\n            _classCallCheck(this, MultiCanvas);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiCanvas).call(this, container, params));\n            /**\n             * @type {number}\n             */\n\n            _this.maxCanvasWidth = params.maxCanvasWidth;\n            /**\n             * @type {number}\n             */\n\n            _this.maxCanvasElementWidth = Math.round(params.maxCanvasWidth / params.pixelRatio);\n            /**\n             * Whether or not the progress wave is rendered. If the `waveColor`\n             * and `progressColor` are the same color it is not.\n             *\n             * @type {boolean}\n             */\n\n            _this.hasProgressCanvas = params.waveColor != params.progressColor;\n            /**\n             * @type {number}\n             */\n\n            _this.halfPixel = 0.5 / params.pixelRatio;\n            /**\n             * List of `CanvasEntry` instances.\n             *\n             * @type {Array}\n             */\n\n            _this.canvases = [];\n            /**\n             * @type {HTMLElement}\n             */\n\n            _this.progressWave = null;\n            /**\n             * Class used to generate entries.\n             *\n             * @type {function}\n             */\n\n            _this.EntryClass = _drawer2.default;\n            /**\n             * Canvas 2d context attributes.\n             *\n             * @type {object}\n             */\n\n            _this.canvasContextAttributes = params.drawingContextAttributes;\n            /**\n             * Overlap added between entries to prevent vertical white stripes\n             * between `canvas` elements.\n             *\n             * @type {number}\n             */\n\n            _this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n            /**\n             * The radius of the wave bars. Makes bars rounded\n             *\n             * @type {number}\n             */\n\n            _this.barRadius = params.barRadius || 0;\n            return _this;\n          }\n          /**\n           * Initialize the drawer\n           */\n\n\n          _createClass(MultiCanvas, [{\n            key: \"init\",\n            value: function init() {\n              this.createWrapper();\n              this.createElements();\n            }\n            /**\n             * Create the canvas elements and style them\n             *\n             */\n\n          }, {\n            key: \"createElements\",\n            value: function createElements() {\n              this.progressWave = this.wrapper.appendChild(this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n              }));\n              this.addCanvas();\n              this.updateCursor();\n            }\n            /**\n             * Update cursor style\n             */\n\n          }, {\n            key: \"updateCursor\",\n            value: function updateCursor() {\n              this.style(this.progressWave, {\n                borderRightWidth: this.params.cursorWidth + 'px',\n                borderRightColor: this.params.cursorColor\n              });\n            }\n            /**\n             * Adjust to the updated size by adding or removing canvases\n             */\n\n          }, {\n            key: \"updateSize\",\n            value: function updateSize() {\n              var _this2 = this;\n\n              var totalWidth = Math.round(this.width / this.params.pixelRatio);\n              var requiredCanvases = Math.ceil(totalWidth / (this.maxCanvasElementWidth + this.overlap)); // add required canvases\n\n              while (this.canvases.length < requiredCanvases) {\n                this.addCanvas();\n              } // remove older existing canvases, if any\n\n\n              while (this.canvases.length > requiredCanvases) {\n                this.removeCanvas();\n              }\n\n              var canvasWidth = this.maxCanvasWidth + this.overlap;\n              var lastCanvas = this.canvases.length - 1;\n              this.canvases.forEach(function (entry, i) {\n                if (i == lastCanvas) {\n                  canvasWidth = _this2.width - _this2.maxCanvasWidth * lastCanvas;\n                }\n\n                _this2.updateDimensions(entry, canvasWidth, _this2.height);\n\n                entry.clearWave();\n              });\n            }\n            /**\n             * Add a canvas to the canvas list\n             *\n             */\n\n          }, {\n            key: \"addCanvas\",\n            value: function addCanvas() {\n              var entry = new this.EntryClass();\n              entry.canvasContextAttributes = this.canvasContextAttributes;\n              entry.hasProgressCanvas = this.hasProgressCanvas;\n              entry.halfPixel = this.halfPixel;\n              var leftOffset = this.maxCanvasElementWidth * this.canvases.length; // wave\n\n              entry.initWave(this.wrapper.appendChild(this.style(document.createElement('canvas'), {\n                position: 'absolute',\n                zIndex: 2,\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%',\n                pointerEvents: 'none'\n              }))); // progress\n\n              if (this.hasProgressCanvas) {\n                entry.initProgress(this.progressWave.appendChild(this.style(document.createElement('canvas'), {\n                  position: 'absolute',\n                  left: leftOffset + 'px',\n                  top: 0,\n                  bottom: 0,\n                  height: '100%'\n                })));\n              }\n\n              this.canvases.push(entry);\n            }\n            /**\n             * Pop single canvas from the list\n             *\n             */\n\n          }, {\n            key: \"removeCanvas\",\n            value: function removeCanvas() {\n              var lastEntry = this.canvases[this.canvases.length - 1]; // wave\n\n              lastEntry.wave.parentElement.removeChild(lastEntry.wave); // progress\n\n              if (this.hasProgressCanvas) {\n                lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n              } // cleanup\n\n\n              if (lastEntry) {\n                lastEntry.destroy();\n                lastEntry = null;\n              }\n\n              this.canvases.pop();\n            }\n            /**\n             * Update the dimensions of a canvas element\n             *\n             * @param {CanvasEntry} entry Target entry\n             * @param {number} width The new width of the element\n             * @param {number} height The new height of the element\n             */\n\n          }, {\n            key: \"updateDimensions\",\n            value: function updateDimensions(entry, width, height) {\n              var elementWidth = Math.round(width / this.params.pixelRatio);\n              var totalWidth = Math.round(this.width / this.params.pixelRatio); // update canvas dimensions\n\n              entry.updateDimensions(elementWidth, totalWidth, width, height); // style element\n\n              this.style(this.progressWave, {\n                display: 'block'\n              });\n            }\n            /**\n             * Clear the whole multi-canvas\n             */\n\n          }, {\n            key: \"clearWave\",\n            value: function clearWave() {\n              var _this3 = this;\n\n              util.frame(function () {\n                _this3.canvases.forEach(function (entry) {\n                  return entry.clearWave();\n                });\n              })();\n            }\n            /**\n             * Draw a waveform with bars\n             *\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n             * for split channel rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0. Must be an integer.\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             * @returns {void}\n             */\n\n          }, {\n            key: \"drawBars\",\n            value: function drawBars(peaks, channelIndex, start, end) {\n              var _this4 = this;\n\n              return this.prepareDraw(peaks, channelIndex, start, end, function (_ref) {\n                var absmax = _ref.absmax,\n                    hasMinVals = _ref.hasMinVals,\n                    height = _ref.height,\n                    offsetY = _ref.offsetY,\n                    halfH = _ref.halfH,\n                    peaks = _ref.peaks; // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n\n                if (start === undefined) {\n                  return;\n                } // Skip every other value if there are negatives.\n\n\n                var peakIndexScale = hasMinVals ? 2 : 1;\n                var length = peaks.length / peakIndexScale;\n                var bar = _this4.params.barWidth * _this4.params.pixelRatio;\n                var gap = _this4.params.barGap === null ? Math.max(_this4.params.pixelRatio, ~~(bar / 2)) : Math.max(_this4.params.pixelRatio, _this4.params.barGap * _this4.params.pixelRatio);\n                var step = bar + gap;\n                var scale = length / _this4.width;\n                var first = start;\n                var last = end;\n                var i = first;\n\n                for (i; i < last; i += step) {\n                  var peak = peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                  var h = Math.round(peak / absmax * halfH);\n                  /* in case of silences, allow the user to specify that we\n                   * always draw *something* (normally a 1px high bar) */\n\n                  if (h == 0 && _this4.params.barMinHeight) h = _this4.params.barMinHeight;\n\n                  _this4.fillRect(i + _this4.halfPixel, halfH - h + offsetY, bar + _this4.halfPixel, h * 2, _this4.barRadius);\n                }\n              });\n            }\n            /**\n             * Draw a waveform\n             *\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n             * for split channel rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number?} start The x-offset of the beginning of the area that\n             * should be rendered (If this isn't set only a flat line is rendered)\n             * @param {number?} end The x-offset of the end of the area that should be\n             * rendered\n             * @returns {void}\n             */\n\n          }, {\n            key: \"drawWave\",\n            value: function drawWave(peaks, channelIndex, start, end) {\n              var _this5 = this;\n\n              return this.prepareDraw(peaks, channelIndex, start, end, function (_ref2) {\n                var absmax = _ref2.absmax,\n                    hasMinVals = _ref2.hasMinVals,\n                    height = _ref2.height,\n                    offsetY = _ref2.offsetY,\n                    halfH = _ref2.halfH,\n                    peaks = _ref2.peaks,\n                    channelIndex = _ref2.channelIndex;\n\n                if (!hasMinVals) {\n                  var reflectedPeaks = [];\n                  var len = peaks.length;\n                  var i = 0;\n\n                  for (i; i < len; i++) {\n                    reflectedPeaks[2 * i] = peaks[i];\n                    reflectedPeaks[2 * i + 1] = -peaks[i];\n                  }\n\n                  peaks = reflectedPeaks;\n                } // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n\n\n                if (start !== undefined) {\n                  _this5.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                } // always draw a median line\n\n\n                _this5.fillRect(0, halfH + offsetY - _this5.halfPixel, _this5.width, _this5.halfPixel, _this5.barRadius);\n              });\n            }\n            /**\n             * Tell the canvas entries to render their portion of the waveform\n             *\n             * @param {number[]} peaks Peaks data\n             * @param {number} absmax Maximum peak value (absolute)\n             * @param {number} halfH Half the height of the waveform\n             * @param {number} offsetY Offset to the top\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that\n             * should be rendered\n             * @param {channelIndex} channelIndex The channel index of the line drawn\n             */\n\n          }, {\n            key: \"drawLine\",\n            value: function drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n              var _this6 = this;\n\n              var _ref3 = this.params.splitChannelsOptions.channelColors[channelIndex] || {},\n                  waveColor = _ref3.waveColor,\n                  progressColor = _ref3.progressColor;\n\n              this.canvases.forEach(function (entry, i) {\n                _this6.setFillStyles(entry, waveColor, progressColor);\n\n                entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n              });\n            }\n            /**\n             * Draw a rectangle on the multi-canvas\n             *\n             * @param {number} x X-position of the rectangle\n             * @param {number} y Y-position of the rectangle\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             */\n\n          }, {\n            key: \"fillRect\",\n            value: function fillRect(x, y, width, height, radius) {\n              var startCanvas = Math.floor(x / this.maxCanvasWidth);\n              var endCanvas = Math.min(Math.ceil((x + width) / this.maxCanvasWidth) + 1, this.canvases.length);\n              var i = startCanvas;\n\n              for (i; i < endCanvas; i++) {\n                var entry = this.canvases[i];\n                var leftOffset = i * this.maxCanvasWidth;\n                var intersection = {\n                  x1: Math.max(x, i * this.maxCanvasWidth),\n                  y1: y,\n                  x2: Math.min(x + width, i * this.maxCanvasWidth + entry.wave.width),\n                  y2: y + height\n                };\n\n                if (intersection.x1 < intersection.x2) {\n                  this.setFillStyles(entry);\n                  entry.fillRects(intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1, radius);\n                }\n              }\n            }\n            /**\n             * Returns whether to hide the channel from being drawn based on params.\n             *\n             * @param {number} channelIndex The index of the current channel.\n             * @returns {bool} True to hide the channel, false to draw.\n             */\n\n          }, {\n            key: \"hideChannel\",\n            value: function hideChannel(channelIndex) {\n              return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n            }\n            /**\n             * Performs preparation tasks and calculations which are shared by `drawBars`\n             * and `drawWave`\n             *\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n             * split channel rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number?} start The x-offset of the beginning of the area that\n             * should be rendered. If this isn't set only a flat line is rendered\n             * @param {number?} end The x-offset of the end of the area that should be\n             * rendered\n             * @param {function} fn The render function to call, e.g. `drawWave`\n             * @param {number} drawIndex The index of the current channel after filtering.\n             * @returns {void}\n             */\n\n          }, {\n            key: \"prepareDraw\",\n            value: function prepareDraw(peaks, channelIndex, start, end, fn, drawIndex) {\n              var _this7 = this;\n\n              return util.frame(function () {\n                // Split channels and call this function with the channelIndex set\n                if (peaks[0] instanceof Array) {\n                  var channels = peaks;\n\n                  if (_this7.params.splitChannels) {\n                    var filteredChannels = channels.filter(function (c, i) {\n                      return !_this7.hideChannel(i);\n                    });\n\n                    if (!_this7.params.splitChannelsOptions.overlay) {\n                      _this7.setHeight(Math.max(filteredChannels.length, 1) * _this7.params.height * _this7.params.pixelRatio);\n                    }\n\n                    return channels.forEach(function (channelPeaks, i) {\n                      return _this7.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks));\n                    });\n                  }\n\n                  peaks = channels[0];\n                } // Return and do not draw channel peaks if hidden.\n\n\n                if (_this7.hideChannel(channelIndex)) {\n                  return;\n                } // calculate maximum modulation value, either from the barHeight\n                // parameter or if normalize=true from the largest value in the peak\n                // set\n\n\n                var absmax = 1 / _this7.params.barHeight;\n\n                if (_this7.params.normalize) {\n                  var max = util.max(peaks);\n                  var min = util.min(peaks);\n                  absmax = -min > max ? -min : max;\n                } // Bar wave draws the bottom only as a reflection of the top,\n                // so we don't need negative values\n\n\n                var hasMinVals = [].some.call(peaks, function (val) {\n                  return val < 0;\n                });\n                var height = _this7.params.height * _this7.params.pixelRatio;\n                var offsetY = height * drawIndex || 0;\n                var halfH = height / 2;\n                return fn({\n                  absmax: absmax,\n                  hasMinVals: hasMinVals,\n                  height: height,\n                  offsetY: offsetY,\n                  halfH: halfH,\n                  peaks: peaks,\n                  channelIndex: channelIndex\n                });\n              })();\n            }\n            /**\n             * Set the fill styles for a certain entry (wave and progress)\n             *\n             * @param {CanvasEntry} entry Target entry\n             * @param {string} waveColor Wave color to draw this entry\n             * @param {string} progressColor Progress color to draw this entry\n             */\n\n          }, {\n            key: \"setFillStyles\",\n            value: function setFillStyles(entry) {\n              var waveColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.waveColor;\n              var progressColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.params.progressColor;\n              entry.setFillStyles(waveColor, progressColor);\n            }\n            /**\n             * Return image data of the multi-canvas\n             *\n             * When using a `type` of `'blob'`, this will return a `Promise`.\n             *\n             * @param {string} format='image/png' An optional value of a format type.\n             * @param {number} quality=0.92 An optional value between 0 and 1.\n             * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n             * @return {string|string[]|Promise} When using the default `'dataURL'`\n             * `type` this returns a single data URL or an array of data URLs,\n             * one for each canvas. When using the `'blob'` `type` this returns a\n             * `Promise` that resolves with an array of `Blob` instances, one for each\n             * canvas.\n             */\n\n          }, {\n            key: \"getImage\",\n            value: function getImage(format, quality, type) {\n              if (type === 'blob') {\n                return Promise.all(this.canvases.map(function (entry) {\n                  return entry.getImage(format, quality, type);\n                }));\n              } else if (type === 'dataURL') {\n                var images = this.canvases.map(function (entry) {\n                  return entry.getImage(format, quality, type);\n                });\n                return images.length > 1 ? images : images[0];\n              }\n            }\n            /**\n             * Render the new progress\n             *\n             * @param {number} position X-offset of progress position in pixels\n             */\n\n          }, {\n            key: \"updateProgress\",\n            value: function updateProgress(position) {\n              this.style(this.progressWave, {\n                width: position + 'px'\n              });\n            }\n          }]);\n\n          return MultiCanvas;\n        }(_drawer.default);\n\n        exports.default = MultiCanvas;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/mediaelement-webaudio.js\":\n      /*!**************************************!*\\\n        !*** ./src/mediaelement-webaudio.js ***!\n        \\**************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcMediaelementWebaudioJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _mediaelement = _interopRequireDefault(__webpack_require__(\n        /*! ./mediaelement */\n        \"./src/mediaelement.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n         * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n         * buffer the entire file in one request, and you still get the filtering and scripting functionality\n         * of the webaudio API.\n         * Note that in order to use range requests and prevent buffering, you must provide peak data.\n         *\n         * @since 3.2.0\n         */\n\n\n        var MediaElementWebAudio = /*#__PURE__*/function (_MediaElement) {\n          _inherits(MediaElementWebAudio, _MediaElement);\n          /**\n           * Construct the backend\n           *\n           * @param {WavesurferParams} params Wavesurfer parameters\n           */\n\n\n          function MediaElementWebAudio(params) {\n            var _this;\n\n            _classCallCheck(this, MediaElementWebAudio);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(MediaElementWebAudio).call(this, params));\n            /** @private */\n\n            _this.params = params;\n            /** @private */\n\n            _this.sourceMediaElement = null;\n            return _this;\n          }\n          /**\n           * Initialise the backend, called in `wavesurfer.createBackend()`\n           */\n\n\n          _createClass(MediaElementWebAudio, [{\n            key: \"init\",\n            value: function init() {\n              this.setPlaybackRate(this.params.audioRate);\n              this.createTimer();\n              this.createVolumeNode();\n              this.createScriptNode();\n              this.createAnalyserNode();\n            }\n            /**\n             * Private method called by both `load` (from url)\n             * and `loadElt` (existing media element) methods.\n             *\n             * @param {HTMLMediaElement} media HTML5 Audio or Video element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             * @private\n             */\n\n          }, {\n            key: \"_load\",\n            value: function _load(media, peaks) {\n              _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"_load\", this).call(this, media, peaks);\n\n              this.createMediaElementSource(media);\n            }\n            /**\n             * Create MediaElementSource node\n             *\n             * @since 3.2.0\n             * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n             */\n\n          }, {\n            key: \"createMediaElementSource\",\n            value: function createMediaElementSource(mediaElement) {\n              this.sourceMediaElement = this.ac.createMediaElementSource(mediaElement);\n              this.sourceMediaElement.connect(this.analyser);\n            }\n          }, {\n            key: \"play\",\n            value: function play(start, end) {\n              this.resumeAudioContext();\n              return _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"play\", this).call(this, start, end);\n            }\n            /**\n             * This is called when wavesurfer is destroyed\n             *\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"destroy\", this).call(this);\n\n              this.destroyWebAudio();\n            }\n          }]);\n\n          return MediaElementWebAudio;\n        }(_mediaelement.default);\n\n        exports.default = MediaElementWebAudio;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/mediaelement.js\":\n      /*!*****************************!*\\\n        !*** ./src/mediaelement.js ***!\n        \\*****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcMediaelementJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _webaudio = _interopRequireDefault(__webpack_require__(\n        /*! ./webaudio */\n        \"./src/webaudio.js\"));\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * MediaElement backend\n         */\n\n\n        var MediaElement = /*#__PURE__*/function (_WebAudio) {\n          _inherits(MediaElement, _WebAudio);\n          /**\n           * Construct the backend\n           *\n           * @param {WavesurferParams} params Wavesurfer parameters\n           */\n\n\n          function MediaElement(params) {\n            var _this;\n\n            _classCallCheck(this, MediaElement);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(MediaElement).call(this, params));\n            /** @private */\n\n            _this.params = params;\n            /**\n             * Initially a dummy media element to catch errors. Once `_load` is\n             * called, this will contain the actual `HTMLMediaElement`.\n             * @private\n             */\n\n            _this.media = {\n              currentTime: 0,\n              duration: 0,\n              paused: true,\n              playbackRate: 1,\n              play: function play() {},\n              pause: function pause() {},\n              volume: 0\n            };\n            /** @private */\n\n            _this.mediaType = params.mediaType.toLowerCase();\n            /** @private */\n\n            _this.elementPosition = params.elementPosition;\n            /** @private */\n\n            _this.peaks = null;\n            /** @private */\n\n            _this.playbackRate = 1;\n            /** @private */\n\n            _this.volume = 1;\n            /** @private */\n\n            _this.isMuted = false;\n            /** @private */\n\n            _this.buffer = null;\n            /** @private */\n\n            _this.onPlayEnd = null;\n            /** @private */\n\n            _this.mediaListeners = {};\n            return _this;\n          }\n          /**\n           * Initialise the backend, called in `wavesurfer.createBackend()`\n           */\n\n\n          _createClass(MediaElement, [{\n            key: \"init\",\n            value: function init() {\n              this.setPlaybackRate(this.params.audioRate);\n              this.createTimer();\n            }\n            /**\n             * Attach event listeners to media element.\n             */\n\n          }, {\n            key: \"_setupMediaListeners\",\n            value: function _setupMediaListeners() {\n              var _this2 = this;\n\n              this.mediaListeners.error = function () {\n                _this2.fireEvent('error', 'Error loading media element');\n              };\n\n              this.mediaListeners.canplay = function () {\n                _this2.fireEvent('canplay');\n              };\n\n              this.mediaListeners.ended = function () {\n                _this2.fireEvent('finish');\n              }; // listen to and relay play, pause and seeked events to enable\n              // playback control from the external media element\n\n\n              this.mediaListeners.play = function () {\n                _this2.fireEvent('play');\n              };\n\n              this.mediaListeners.pause = function () {\n                _this2.fireEvent('pause');\n              };\n\n              this.mediaListeners.seeked = function (event) {\n                _this2.fireEvent('seek');\n              };\n\n              this.mediaListeners.volumechange = function (event) {\n                _this2.isMuted = _this2.media.muted;\n\n                if (_this2.isMuted) {\n                  _this2.volume = 0;\n                } else {\n                  _this2.volume = _this2.media.volume;\n                }\n\n                _this2.fireEvent('volume');\n              }; // reset event listeners\n\n\n              Object.keys(this.mediaListeners).forEach(function (id) {\n                _this2.media.removeEventListener(id, _this2.mediaListeners[id]);\n\n                _this2.media.addEventListener(id, _this2.mediaListeners[id]);\n              });\n            }\n            /**\n             * Create a timer to provide a more precise `audioprocess` event.\n             */\n\n          }, {\n            key: \"createTimer\",\n            value: function createTimer() {\n              var _this3 = this;\n\n              var onAudioProcess = function onAudioProcess() {\n                if (_this3.isPaused()) {\n                  return;\n                }\n\n                _this3.fireEvent('audioprocess', _this3.getCurrentTime()); // Call again in the next frame\n\n\n                util.frame(onAudioProcess)();\n              };\n\n              this.on('play', onAudioProcess); // Update the progress one more time to prevent it from being stuck in\n              // case of lower framerates\n\n              this.on('pause', function () {\n                _this3.fireEvent('audioprocess', _this3.getCurrentTime());\n              });\n            }\n            /**\n             * Create media element with url as its source,\n             * and append to container element.\n             *\n             * @param {string} url Path to media file\n             * @param {HTMLElement} container HTML element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             * @param {string} preload HTML 5 preload attribute value\n             * @throws Will throw an error if the `url` argument is not a valid media\n             * element.\n             */\n\n          }, {\n            key: \"load\",\n            value: function load(url, container, peaks, preload) {\n              var media = document.createElement(this.mediaType);\n              media.controls = this.params.mediaControls;\n              media.autoplay = this.params.autoplay || false;\n              media.preload = preload == null ? 'auto' : preload;\n              media.src = url;\n              media.style.width = '100%';\n              var prevMedia = container.querySelector(this.mediaType);\n\n              if (prevMedia) {\n                container.removeChild(prevMedia);\n              }\n\n              container.appendChild(media);\n\n              this._load(media, peaks);\n            }\n            /**\n             * Load existing media element.\n             *\n             * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             */\n\n          }, {\n            key: \"loadElt\",\n            value: function loadElt(elt, peaks) {\n              elt.controls = this.params.mediaControls;\n              elt.autoplay = this.params.autoplay || false;\n\n              this._load(elt, peaks);\n            }\n            /**\n             * Method called by both `load` (from url)\n             * and `loadElt` (existing media element) methods.\n             *\n             * @param {HTMLMediaElement} media HTML5 Audio or Video element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             * @throws Will throw an error if the `media` argument is not a valid media\n             * element.\n             * @private\n             */\n\n          }, {\n            key: \"_load\",\n            value: function _load(media, peaks) {\n              // verify media element is valid\n              if (!(media instanceof HTMLMediaElement) || typeof media.addEventListener === 'undefined') {\n                throw new Error('media parameter is not a valid media element');\n              } // load must be called manually on iOS, otherwise peaks won't draw\n              // until a user interaction triggers load --> 'ready' event\n\n\n              if (typeof media.load == 'function') {\n                // Resets the media element and restarts the media resource. Any\n                // pending events are discarded. How much media data is fetched is\n                // still affected by the preload attribute.\n                media.load();\n              }\n\n              this.media = media;\n\n              this._setupMediaListeners();\n\n              this.peaks = peaks;\n              this.onPlayEnd = null;\n              this.buffer = null;\n              this.isMuted = media.muted;\n              this.setPlaybackRate(this.playbackRate);\n              this.setVolume(this.volume);\n            }\n            /**\n             * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n             *\n             * @return {boolean} Media paused or not\n             */\n\n          }, {\n            key: \"isPaused\",\n            value: function isPaused() {\n              return !this.media || this.media.paused;\n            }\n            /**\n             * Used by `wavesurfer.getDuration()`\n             *\n             * @return {number} Duration\n             */\n\n          }, {\n            key: \"getDuration\",\n            value: function getDuration() {\n              if (this.explicitDuration) {\n                return this.explicitDuration;\n              }\n\n              var duration = (this.buffer || this.media).duration;\n\n              if (duration >= Infinity) {\n                // streaming audio\n                duration = this.media.seekable.end(0);\n              }\n\n              return duration;\n            }\n            /**\n             * Returns the current time in seconds relative to the audio-clip's\n             * duration.\n             *\n             * @return {number} Current time\n             */\n\n          }, {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n              return this.media && this.media.currentTime;\n            }\n            /**\n             * Get the position from 0 to 1\n             *\n             * @return {number} Current position\n             */\n\n          }, {\n            key: \"getPlayedPercents\",\n            value: function getPlayedPercents() {\n              return this.getCurrentTime() / this.getDuration() || 0;\n            }\n            /**\n             * Get the audio source playback rate.\n             *\n             * @return {number} Playback rate\n             */\n\n          }, {\n            key: \"getPlaybackRate\",\n            value: function getPlaybackRate() {\n              return this.playbackRate || this.media.playbackRate;\n            }\n            /**\n             * Set the audio source playback rate.\n             *\n             * @param {number} value Playback rate\n             */\n\n          }, {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(value) {\n              this.playbackRate = value || 1;\n              this.media.playbackRate = this.playbackRate;\n            }\n            /**\n             * Used by `wavesurfer.seekTo()`\n             *\n             * @param {number} start Position to start at in seconds\n             */\n\n          }, {\n            key: \"seekTo\",\n            value: function seekTo(start) {\n              if (start != null) {\n                this.media.currentTime = start;\n              }\n\n              this.clearPlayEnd();\n            }\n            /**\n             * Plays the loaded audio region.\n             *\n             * @param {number} start Start offset in seconds, relative to the beginning\n             * of a clip.\n             * @param {number} end When to stop, relative to the beginning of a clip.\n             * @emits MediaElement#play\n             * @return {Promise} Result\n             */\n\n          }, {\n            key: \"play\",\n            value: function play(start, end) {\n              this.seekTo(start);\n              var promise = this.media.play();\n              end && this.setPlayEnd(end);\n              return promise;\n            }\n            /**\n             * Pauses the loaded audio.\n             *\n             * @emits MediaElement#pause\n             * @return {Promise} Result\n             */\n\n          }, {\n            key: \"pause\",\n            value: function pause() {\n              var promise;\n\n              if (this.media) {\n                promise = this.media.pause();\n              }\n\n              this.clearPlayEnd();\n              return promise;\n            }\n            /**\n             * Set the play end\n             *\n             * @param {number} end Where to end\n             */\n\n          }, {\n            key: \"setPlayEnd\",\n            value: function setPlayEnd(end) {\n              var _this4 = this;\n\n              this.clearPlayEnd();\n\n              this._onPlayEnd = function (time) {\n                if (time >= end) {\n                  _this4.pause();\n\n                  _this4.seekTo(end);\n                }\n              };\n\n              this.on('audioprocess', this._onPlayEnd);\n            }\n            /** @private */\n\n          }, {\n            key: \"clearPlayEnd\",\n            value: function clearPlayEnd() {\n              if (this._onPlayEnd) {\n                this.un('audioprocess', this._onPlayEnd);\n                this._onPlayEnd = null;\n              }\n            }\n            /**\n             * Compute the max and min value of the waveform when broken into\n             * <length> subranges.\n             *\n             * @param {number} length How many subranges to break the waveform into.\n             * @param {number} first First sample in the required range.\n             * @param {number} last Last sample in the required range.\n             * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n             * arrays of peaks consisting of (max, min) values for each subrange.\n             */\n\n          }, {\n            key: \"getPeaks\",\n            value: function getPeaks(length, first, last) {\n              if (this.buffer) {\n                return _get(_getPrototypeOf(MediaElement.prototype), \"getPeaks\", this).call(this, length, first, last);\n              }\n\n              return this.peaks || [];\n            }\n            /**\n             * Set the sink id for the media player\n             *\n             * @param {string} deviceId String value representing audio device id.\n             * @returns {Promise} A Promise that resolves to `undefined` when there\n             * are no errors.\n             */\n\n          }, {\n            key: \"setSinkId\",\n            value: function setSinkId(deviceId) {\n              if (deviceId) {\n                if (!this.media.setSinkId) {\n                  return Promise.reject(new Error('setSinkId is not supported in your browser'));\n                }\n\n                return this.media.setSinkId(deviceId);\n              }\n\n              return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n            }\n            /**\n             * Get the current volume\n             *\n             * @return {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"getVolume\",\n            value: function getVolume() {\n              return this.volume;\n            }\n            /**\n             * Set the audio volume\n             *\n             * @param {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"setVolume\",\n            value: function setVolume(value) {\n              this.volume = value; // no need to change when it's already at that volume\n\n              if (this.media.volume !== this.volume) {\n                this.media.volume = this.volume;\n              }\n            }\n            /**\n             * Enable or disable muted audio\n             *\n             * @since 4.0.0\n             * @param {boolean} muted Specify `true` to mute audio.\n             */\n\n          }, {\n            key: \"setMute\",\n            value: function setMute(muted) {\n              // This causes a volume change to be emitted too through the\n              // volumechange event listener.\n              this.isMuted = this.media.muted = muted;\n            }\n            /**\n             * This is called when wavesurfer is destroyed\n             *\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              var _this5 = this;\n\n              this.pause();\n              this.unAll();\n              this.destroyed = true; // cleanup media event listeners\n\n              Object.keys(this.mediaListeners).forEach(function (id) {\n                if (_this5.media) {\n                  _this5.media.removeEventListener(id, _this5.mediaListeners[id]);\n                }\n              });\n\n              if (this.params.removeMediaElementOnDestroy && this.media && this.media.parentNode) {\n                this.media.parentNode.removeChild(this.media);\n              }\n\n              this.media = null;\n            }\n          }]);\n\n          return MediaElement;\n        }(_webaudio.default);\n\n        exports.default = MediaElement;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/peakcache.js\":\n      /*!**************************!*\\\n        !*** ./src/peakcache.js ***!\n        \\**************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcPeakcacheJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * Caches the decoded peaks data to improve rendering speed for large audio\n         *\n         * Is used if the option parameter `partialRender` is set to `true`\n         */\n\n\n        var PeakCache = /*#__PURE__*/function () {\n          /**\n           * Instantiate cache\n           */\n          function PeakCache() {\n            _classCallCheck(this, PeakCache);\n\n            this.clearPeakCache();\n          }\n          /**\n           * Empty the cache\n           */\n\n\n          _createClass(PeakCache, [{\n            key: \"clearPeakCache\",\n            value: function clearPeakCache() {\n              /**\n               * Flat array with entries that are always in pairs to mark the\n               * beginning and end of each subrange.  This is a convenience so we can\n               * iterate over the pairs for easy set difference operations.\n               * @private\n               */\n              this.peakCacheRanges = [];\n              /**\n               * Length of the entire cachable region, used for resetting the cache\n               * when this changes (zoom events, for instance).\n               * @private\n               */\n\n              this.peakCacheLength = -1;\n            }\n            /**\n             * Add a range of peaks to the cache\n             *\n             * @param {number} length The length of the range\n             * @param {number} start The x offset of the start of the range\n             * @param {number} end The x offset of the end of the range\n             * @return {Number.<Array[]>} Array with arrays of numbers\n             */\n\n          }, {\n            key: \"addRangeToPeakCache\",\n            value: function addRangeToPeakCache(length, start, end) {\n              if (length != this.peakCacheLength) {\n                this.clearPeakCache();\n                this.peakCacheLength = length;\n              } // Return ranges that weren't in the cache before the call.\n\n\n              var uncachedRanges = [];\n              var i = 0; // Skip ranges before the current start.\n\n              while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] < start) {\n                i++;\n              } // If |i| is even, |start| falls after an existing range.  Otherwise,\n              // |start| falls between an existing range, and the uncached region\n              // starts when we encounter the next node in |peakCacheRanges| or\n              // |end|, whichever comes first.\n\n\n              if (i % 2 == 0) {\n                uncachedRanges.push(start);\n              }\n\n              while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] <= end) {\n                uncachedRanges.push(this.peakCacheRanges[i]);\n                i++;\n              } // If |i| is even, |end| is after all existing ranges.\n\n\n              if (i % 2 == 0) {\n                uncachedRanges.push(end);\n              } // Filter out the 0-length ranges.\n\n\n              uncachedRanges = uncachedRanges.filter(function (item, pos, arr) {\n                if (pos == 0) {\n                  return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                  return item != arr[pos - 1];\n                }\n\n                return item != arr[pos - 1] && item != arr[pos + 1];\n              }); // Merge the two ranges together, uncachedRanges will either contain\n              // wholly new points, or duplicates of points in peakCacheRanges.  If\n              // duplicates are detected, remove both and extend the range.\n\n              this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n              this.peakCacheRanges = this.peakCacheRanges.sort(function (a, b) {\n                return a - b;\n              }).filter(function (item, pos, arr) {\n                if (pos == 0) {\n                  return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                  return item != arr[pos - 1];\n                }\n\n                return item != arr[pos - 1] && item != arr[pos + 1];\n              }); // Push the uncached ranges into an array of arrays for ease of\n              // iteration in the functions that call this.\n\n              var uncachedRangePairs = [];\n\n              for (i = 0; i < uncachedRanges.length; i += 2) {\n                uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n              }\n\n              return uncachedRangePairs;\n            }\n            /**\n             * For testing\n             *\n             * @return {Number.<Array[]>} Array with arrays of numbers\n             */\n\n          }, {\n            key: \"getCacheRanges\",\n            value: function getCacheRanges() {\n              var peakCacheRangePairs = [];\n              var i;\n\n              for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n                peakCacheRangePairs.push([this.peakCacheRanges[i], this.peakCacheRanges[i + 1]]);\n              }\n\n              return peakCacheRangePairs;\n            }\n          }]);\n\n          return PeakCache;\n        }();\n\n        exports.default = PeakCache;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/ajax.js\":\n      /*!**************************!*\\\n        !*** ./src/util/ajax.js ***!\n        \\**************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilAjaxJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = ajax;\n\n        var _observer = _interopRequireDefault(__webpack_require__(\n        /*! ./observer */\n        \"./src/util/observer.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n        /**\n         * Perform an ajax request using `XMLHttpRequest`.\n         *\n         * @deprecated Use `util.fetchFile` instead.\n         *\n         * @param {Object} options AJAX options to use. See example below for options.\n         * @returns {Observer} Observer instance\n         * @example\n         * // default options\n         * let options = {\n         *     method: 'GET',\n         *     url: undefined,\n         *     responseType: 'json',\n         *     xhr: {}\n         * };\n         *\n         * // override default options\n         * options.url = '../media/demo.wav';\n         * options.responseType = 'arraybuffer';\n         * options.xhr = {\n         *     requestHeaders: [\n         *         {\n         *             key: 'Authorization',\n         *             value: 'my-token'\n         *         }\n         *     ],\n         *     withCredentials: true\n         * };\n         *\n         * // make ajax call\n         * let ajaxCall = util.ajax(options);\n         * ajaxCall.on('progress', e => {\n         *     console.log('progress', e);\n         * });\n         * ajaxCall.on('success', (data, e) => {\n         *     console.log('success!', data);\n         * });\n         * ajaxCall.on('error', e => {\n         *     console.warn('ajax error: ' + e.target.statusText);\n         * });\n         */\n\n\n        function ajax(options) {\n          var instance = new _observer.default();\n          var xhr = new XMLHttpRequest();\n          var fired100 = false;\n          xhr.open(options.method || 'GET', options.url, true);\n          xhr.responseType = options.responseType || 'json';\n\n          if (options.xhr) {\n            if (options.xhr.requestHeaders) {\n              // add custom request headers\n              options.xhr.requestHeaders.forEach(function (header) {\n                xhr.setRequestHeader(header.key, header.value);\n              });\n            }\n\n            if (options.xhr.withCredentials) {\n              // use credentials\n              xhr.withCredentials = true;\n            }\n          }\n\n          xhr.addEventListener('progress', function (e) {\n            instance.fireEvent('progress', e);\n\n            if (e.lengthComputable && e.loaded == e.total) {\n              fired100 = true;\n            }\n          });\n          xhr.addEventListener('load', function (e) {\n            if (!fired100) {\n              instance.fireEvent('progress', e);\n            }\n\n            instance.fireEvent('load', e);\n\n            if (200 == xhr.status || 206 == xhr.status) {\n              instance.fireEvent('success', xhr.response, e);\n            } else {\n              instance.fireEvent('error', e);\n            }\n          });\n          xhr.addEventListener('error', function (e) {\n            return instance.fireEvent('error', e);\n          });\n          xhr.send();\n          instance.xhr = xhr;\n          return instance;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/extend.js\":\n      /*!****************************!*\\\n        !*** ./src/util/extend.js ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilExtendJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = extend;\n        /* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n\n        /**\n         * Extend an object shallowly with others\n         *\n         * @param {Object} dest The target object\n         * @param {Object[]} sources The objects to use for extending\n         *\n         * @return {Object} Merged object\n         * @deprecated since version 3.3.0\n         */\n\n        function extend(dest) {\n          console.warn('util.extend is deprecated; use Object.assign instead');\n\n          for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            sources[_key - 1] = arguments[_key];\n          }\n\n          sources.forEach(function (source) {\n            Object.keys(source).forEach(function (key) {\n              dest[key] = source[key];\n            });\n          });\n          return dest;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/fetch.js\":\n      /*!***************************!*\\\n        !*** ./src/util/fetch.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilFetchJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = fetchFile;\n\n        var _observer = _interopRequireDefault(__webpack_require__(\n        /*! ./observer */\n        \"./src/util/observer.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var ProgressHandler = /*#__PURE__*/function () {\n          /**\n           * Instantiate ProgressHandler\n           *\n           * @param {Observer} instance The `fetchFile` observer instance.\n           * @param {Number} contentLength Content length.\n           * @param {Response} response Response object.\n           */\n          function ProgressHandler(instance, contentLength, response) {\n            _classCallCheck(this, ProgressHandler);\n\n            this.instance = instance;\n            this.instance._reader = response.body.getReader();\n            this.total = parseInt(contentLength, 10);\n            this.loaded = 0;\n          }\n          /**\n           * A method that is called once, immediately after the `ReadableStream``\n           * is constructed.\n           *\n           * @param {ReadableStreamDefaultController} controller Controller instance\n           *     used to control the stream.\n           */\n\n\n          _createClass(ProgressHandler, [{\n            key: \"start\",\n            value: function start(controller) {\n              var _this = this;\n\n              var read = function read() {\n                // instance._reader.read() returns a promise that resolves\n                // when a value has been received\n                _this.instance._reader.read().then(function (_ref) {\n                  var done = _ref.done,\n                      value = _ref.value; // result objects contain two properties:\n                  // done  - true if the stream has already given you all its data.\n                  // value - some data. Always undefined when done is true.\n\n                  if (done) {\n                    // ensure onProgress called when content-length=0\n                    if (_this.total === 0) {\n                      _this.instance.onProgress.call(_this.instance, {\n                        loaded: _this.loaded,\n                        total: _this.total,\n                        lengthComputable: false\n                      });\n                    } // no more data needs to be consumed, close the stream\n\n\n                    controller.close();\n                    return;\n                  }\n\n                  _this.loaded += value.byteLength;\n\n                  _this.instance.onProgress.call(_this.instance, {\n                    loaded: _this.loaded,\n                    total: _this.total,\n                    lengthComputable: !(_this.total === 0)\n                  }); // enqueue the next data chunk into our target stream\n\n\n                  controller.enqueue(value);\n                  read();\n                }).catch(function (error) {\n                  controller.error(error);\n                });\n              };\n\n              read();\n            }\n          }]);\n\n          return ProgressHandler;\n        }();\n        /**\n         * Load a file using `fetch`.\n         *\n         * @param {object} options Request options to use. See example below.\n         * @returns {Observer} Observer instance\n         * @example\n         * // default options\n         * let options = {\n         *     url: undefined,\n         *     method: 'GET',\n         *     mode: 'cors',\n         *     credentials: 'same-origin',\n         *     cache: 'default',\n         *     responseType: 'json',\n         *     requestHeaders: [],\n         *     redirect: 'follow',\n         *     referrer: 'client'\n         * };\n         *\n         * // override some options\n         * options.url = '../media/demo.wav';\n        \n         * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n         * options.responseType = 'arraybuffer';\n         *\n         * // make fetch call\n         * let request = util.fetchFile(options);\n         *\n         * // listen for events\n         * request.on('progress', e => {\n         *     console.log('progress', e);\n         * });\n         *\n         * request.on('success', data => {\n         *     console.log('success!', data);\n         * });\n         *\n         * request.on('error', e => {\n         *     console.warn('fetchFile error: ', e);\n         * });\n         */\n\n\n        function fetchFile(options) {\n          if (!options) {\n            throw new Error('fetch options missing');\n          } else if (!options.url) {\n            throw new Error('fetch url missing');\n          }\n\n          var instance = new _observer.default();\n          var fetchHeaders = new Headers();\n          var fetchRequest = new Request(options.url); // add ability to abort\n\n          instance.controller = new AbortController(); // check if headers have to be added\n\n          if (options && options.requestHeaders) {\n            // add custom request headers\n            options.requestHeaders.forEach(function (header) {\n              fetchHeaders.append(header.key, header.value);\n            });\n          } // parse fetch options\n\n\n          var responseType = options.responseType || 'json';\n          var fetchOptions = {\n            method: options.method || 'GET',\n            headers: fetchHeaders,\n            mode: options.mode || 'cors',\n            credentials: options.credentials || 'same-origin',\n            cache: options.cache || 'default',\n            redirect: options.redirect || 'follow',\n            referrer: options.referrer || 'client',\n            signal: instance.controller.signal\n          };\n          fetch(fetchRequest, fetchOptions).then(function (response) {\n            // store response reference\n            instance.response = response;\n            var progressAvailable = true;\n\n            if (!response.body) {\n              // ReadableStream is not yet supported in this browser\n              // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n              progressAvailable = false;\n            } // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n\n\n            var contentLength = response.headers.get('content-length');\n\n            if (contentLength === null) {\n              // Content-Length server response header missing.\n              // Don't evaluate download progress if we can't compare against a total size\n              // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n              progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n              // not able to check download progress so skip it\n              return response;\n            } // fire progress event when during load\n\n\n            instance.onProgress = function (e) {\n              instance.fireEvent('progress', e);\n            };\n\n            return new Response(new ReadableStream(new ProgressHandler(instance, contentLength, response)), fetchOptions);\n          }).then(function (response) {\n            var errMsg;\n\n            if (response.ok) {\n              switch (responseType) {\n                case 'arraybuffer':\n                  return response.arrayBuffer();\n\n                case 'json':\n                  return response.json();\n\n                case 'blob':\n                  return response.blob();\n\n                case 'text':\n                  return response.text();\n\n                default:\n                  errMsg = 'Unknown responseType: ' + responseType;\n                  break;\n              }\n            }\n\n            if (!errMsg) {\n              errMsg = 'HTTP error status: ' + response.status;\n            }\n\n            throw new Error(errMsg);\n          }).then(function (response) {\n            instance.fireEvent('success', response);\n          }).catch(function (error) {\n            instance.fireEvent('error', error);\n          }); // return the fetch request\n\n          instance.fetchRequest = fetchRequest;\n          return instance;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/frame.js\":\n      /*!***************************!*\\\n        !*** ./src/util/frame.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilFrameJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = frame;\n\n        var _requestAnimationFrame = _interopRequireDefault(__webpack_require__(\n        /*! ./request-animation-frame */\n        \"./src/util/request-animation-frame.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n        /**\n         * Create a function which will be called at the next requestAnimationFrame\n         * cycle\n         *\n         * @param {function} func The function to call\n         *\n         * @return {func} The function wrapped within a requestAnimationFrame\n         */\n\n\n        function frame(func) {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return (0, _requestAnimationFrame.default)(function () {\n              return func.apply(void 0, args);\n            });\n          };\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/get-id.js\":\n      /*!****************************!*\\\n        !*** ./src/util/get-id.js ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilGetIdJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = getId;\n        /**\n         * Get a random prefixed ID\n         *\n         * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n         * @returns {String} Random prefixed ID\n         * @example\n         * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n         *\n         * let prefix = 'foo-';\n         * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n         */\n\n        function getId(prefix) {\n          if (prefix === undefined) {\n            prefix = 'wavesurfer_';\n          }\n\n          return prefix + Math.random().toString(32).substring(2);\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/index.js\":\n      /*!***************************!*\\\n        !*** ./src/util/index.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"ajax\", {\n          enumerable: true,\n          get: function get() {\n            return _ajax.default;\n          }\n        });\n        Object.defineProperty(exports, \"getId\", {\n          enumerable: true,\n          get: function get() {\n            return _getId.default;\n          }\n        });\n        Object.defineProperty(exports, \"max\", {\n          enumerable: true,\n          get: function get() {\n            return _max.default;\n          }\n        });\n        Object.defineProperty(exports, \"min\", {\n          enumerable: true,\n          get: function get() {\n            return _min.default;\n          }\n        });\n        Object.defineProperty(exports, \"Observer\", {\n          enumerable: true,\n          get: function get() {\n            return _observer.default;\n          }\n        });\n        Object.defineProperty(exports, \"extend\", {\n          enumerable: true,\n          get: function get() {\n            return _extend.default;\n          }\n        });\n        Object.defineProperty(exports, \"style\", {\n          enumerable: true,\n          get: function get() {\n            return _style.default;\n          }\n        });\n        Object.defineProperty(exports, \"requestAnimationFrame\", {\n          enumerable: true,\n          get: function get() {\n            return _requestAnimationFrame.default;\n          }\n        });\n        Object.defineProperty(exports, \"frame\", {\n          enumerable: true,\n          get: function get() {\n            return _frame.default;\n          }\n        });\n        Object.defineProperty(exports, \"debounce\", {\n          enumerable: true,\n          get: function get() {\n            return _debounce.default;\n          }\n        });\n        Object.defineProperty(exports, \"preventClick\", {\n          enumerable: true,\n          get: function get() {\n            return _preventClick.default;\n          }\n        });\n        Object.defineProperty(exports, \"fetchFile\", {\n          enumerable: true,\n          get: function get() {\n            return _fetch.default;\n          }\n        });\n\n        var _ajax = _interopRequireDefault(__webpack_require__(\n        /*! ./ajax */\n        \"./src/util/ajax.js\"));\n\n        var _getId = _interopRequireDefault(__webpack_require__(\n        /*! ./get-id */\n        \"./src/util/get-id.js\"));\n\n        var _max = _interopRequireDefault(__webpack_require__(\n        /*! ./max */\n        \"./src/util/max.js\"));\n\n        var _min = _interopRequireDefault(__webpack_require__(\n        /*! ./min */\n        \"./src/util/min.js\"));\n\n        var _observer = _interopRequireDefault(__webpack_require__(\n        /*! ./observer */\n        \"./src/util/observer.js\"));\n\n        var _extend = _interopRequireDefault(__webpack_require__(\n        /*! ./extend */\n        \"./src/util/extend.js\"));\n\n        var _style = _interopRequireDefault(__webpack_require__(\n        /*! ./style */\n        \"./src/util/style.js\"));\n\n        var _requestAnimationFrame = _interopRequireDefault(__webpack_require__(\n        /*! ./request-animation-frame */\n        \"./src/util/request-animation-frame.js\"));\n\n        var _frame = _interopRequireDefault(__webpack_require__(\n        /*! ./frame */\n        \"./src/util/frame.js\"));\n\n        var _debounce = _interopRequireDefault(__webpack_require__(\n        /*! debounce */\n        \"./node_modules/debounce/index.js\"));\n\n        var _preventClick = _interopRequireDefault(__webpack_require__(\n        /*! ./prevent-click */\n        \"./src/util/prevent-click.js\"));\n\n        var _fetch = _interopRequireDefault(__webpack_require__(\n        /*! ./fetch */\n        \"./src/util/fetch.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./src/util/max.js\":\n      /*!*************************!*\\\n        !*** ./src/util/max.js ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilMaxJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = max;\n        /**\n         * Get the largest value\n         *\n         * @param   {Array} values Array of numbers\n         * @returns {Number} Largest number found\n         * @example console.log(max([1, 2, 3])); // logs 3\n         */\n\n        function max(values) {\n          var largest = -Infinity;\n          Object.keys(values).forEach(function (i) {\n            if (values[i] > largest) {\n              largest = values[i];\n            }\n          });\n          return largest;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/min.js\":\n      /*!*************************!*\\\n        !*** ./src/util/min.js ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilMinJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = min;\n        /**\n         * Get the smallest value\n         *\n         * @param   {Array} values Array of numbers\n         * @returns {Number} Smallest number found\n         * @example console.log(min([1, 2, 3])); // logs 1\n         */\n\n        function min(values) {\n          var smallest = Number(Infinity);\n          Object.keys(values).forEach(function (i) {\n            if (values[i] < smallest) {\n              smallest = values[i];\n            }\n          });\n          return smallest;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/observer.js\":\n      /*!******************************!*\\\n        !*** ./src/util/observer.js ***!\n        \\******************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilObserverJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @typedef {Object} ListenerDescriptor\n         * @property {string} name The name of the event\n         * @property {function} callback The callback\n         * @property {function} un The function to call to remove the listener\n         */\n\n        /**\n         * Observer class\n         */\n\n\n        var Observer = /*#__PURE__*/function () {\n          /**\n           * Instantiate Observer\n           */\n          function Observer() {\n            _classCallCheck(this, Observer);\n            /**\n             * @private\n             * @todo Initialise the handlers here already and remove the conditional\n             * assignment in `on()`\n             */\n\n\n            this._disabledEventEmissions = [];\n            this.handlers = null;\n          }\n          /**\n           * Attach a handler function for an event.\n           *\n           * @param {string} event Name of the event to listen to\n           * @param {function} fn The callback to trigger when the event is fired\n           * @return {ListenerDescriptor} The event descriptor\n           */\n\n\n          _createClass(Observer, [{\n            key: \"on\",\n            value: function on(event, fn) {\n              var _this = this;\n\n              if (!this.handlers) {\n                this.handlers = {};\n              }\n\n              var handlers = this.handlers[event];\n\n              if (!handlers) {\n                handlers = this.handlers[event] = [];\n              }\n\n              handlers.push(fn); // Return an event descriptor\n\n              return {\n                name: event,\n                callback: fn,\n                un: function un(e, fn) {\n                  return _this.un(e, fn);\n                }\n              };\n            }\n            /**\n             * Remove an event handler.\n             *\n             * @param {string} event Name of the event the listener that should be\n             * removed listens to\n             * @param {function} fn The callback that should be removed\n             */\n\n          }, {\n            key: \"un\",\n            value: function un(event, fn) {\n              if (!this.handlers) {\n                return;\n              }\n\n              var handlers = this.handlers[event];\n              var i;\n\n              if (handlers) {\n                if (fn) {\n                  for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                      handlers.splice(i, 1);\n                    }\n                  }\n                } else {\n                  handlers.length = 0;\n                }\n              }\n            }\n            /**\n             * Remove all event handlers.\n             */\n\n          }, {\n            key: \"unAll\",\n            value: function unAll() {\n              this.handlers = null;\n            }\n            /**\n             * Attach a handler to an event. The handler is executed at most once per\n             * event type.\n             *\n             * @param {string} event The event to listen to\n             * @param {function} handler The callback that is only to be called once\n             * @return {ListenerDescriptor} The event descriptor\n             */\n\n          }, {\n            key: \"once\",\n            value: function once(event, handler) {\n              var _this2 = this;\n\n              var fn = function fn() {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n                /*  eslint-disable no-invalid-this */\n\n\n                handler.apply(_this2, args);\n                /*  eslint-enable no-invalid-this */\n\n                setTimeout(function () {\n                  _this2.un(event, fn);\n                }, 0);\n              };\n\n              return this.on(event, fn);\n            }\n            /**\n             * Disable firing a list of events by name. When specified, event handlers for any event type\n             * passed in here will not be called.\n             *\n             * @since 4.0.0\n             * @param {string[]} eventNames an array of event names to disable emissions for\n             * @example\n             * // disable seek and interaction events\n             * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n             */\n\n          }, {\n            key: \"setDisabledEventEmissions\",\n            value: function setDisabledEventEmissions(eventNames) {\n              this._disabledEventEmissions = eventNames;\n            }\n            /**\n             * plugins borrow part of this class without calling the constructor,\n             * so we have to be careful about _disabledEventEmissions\n             */\n\n          }, {\n            key: \"_isDisabledEventEmission\",\n            value: function _isDisabledEventEmission(event) {\n              return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n            }\n            /**\n             * Manually fire an event\n             *\n             * @param {string} event The event to fire manually\n             * @param {...any} args The arguments with which to call the listeners\n             */\n\n          }, {\n            key: \"fireEvent\",\n            value: function fireEvent(event) {\n              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n              }\n\n              if (!this.handlers || this._isDisabledEventEmission(event)) {\n                return;\n              }\n\n              var handlers = this.handlers[event];\n              handlers && handlers.forEach(function (fn) {\n                fn.apply(void 0, args);\n              });\n            }\n          }]);\n\n          return Observer;\n        }();\n\n        exports.default = Observer;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/prevent-click.js\":\n      /*!***********************************!*\\\n        !*** ./src/util/prevent-click.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilPreventClickJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = preventClick;\n        /**\n         * Stops propagation of click event and removes event listener\n         *\n         * @private\n         * @param {object} event The click event\n         */\n\n        function preventClickHandler(event) {\n          event.stopPropagation();\n          document.body.removeEventListener('click', preventClickHandler, true);\n        }\n        /**\n         * Starts listening for click event and prevent propagation\n         *\n         * @param {object} values Values\n         */\n\n\n        function preventClick(values) {\n          document.body.addEventListener('click', preventClickHandler, true);\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/request-animation-frame.js\":\n      /*!*********************************************!*\\\n        !*** ./src/util/request-animation-frame.js ***!\n        \\*********************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilRequestAnimationFrameJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n        /* eslint-disable valid-jsdoc */\n\n        /**\n         * Returns the `requestAnimationFrame` function for the browser, or a shim with\n         * `setTimeout` if the function is not found\n         *\n         * @return {function} Available `requestAnimationFrame` function for the browser\n         */\n\n        var _default = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n          return setTimeout(callback, 1000 / 60);\n        }).bind(window);\n\n        exports.default = _default;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/style.js\":\n      /*!***************************!*\\\n        !*** ./src/util/style.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcUtilStyleJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = style;\n        /**\n         * Apply a map of styles to an element\n         *\n         * @param {HTMLElement} el The element that the styles will be applied to\n         * @param {Object} styles The map of propName: attribute, both are used as-is\n         *\n         * @return {HTMLElement} el\n         */\n\n        function style(el, styles) {\n          Object.keys(styles).forEach(function (prop) {\n            if (el.style[prop] !== styles[prop]) {\n              el.style[prop] = styles[prop];\n            }\n          });\n          return el;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/wavesurfer.js\":\n      /*!***************************!*\\\n        !*** ./src/wavesurfer.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcWavesurferJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        var _drawer = _interopRequireDefault(__webpack_require__(\n        /*! ./drawer.multicanvas */\n        \"./src/drawer.multicanvas.js\"));\n\n        var _webaudio = _interopRequireDefault(__webpack_require__(\n        /*! ./webaudio */\n        \"./src/webaudio.js\"));\n\n        var _mediaelement = _interopRequireDefault(__webpack_require__(\n        /*! ./mediaelement */\n        \"./src/mediaelement.js\"));\n\n        var _peakcache = _interopRequireDefault(__webpack_require__(\n        /*! ./peakcache */\n        \"./src/peakcache.js\"));\n\n        var _mediaelementWebaudio = _interopRequireDefault(__webpack_require__(\n        /*! ./mediaelement-webaudio */\n        \"./src/mediaelement-webaudio.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /*\n         * This work is licensed under a BSD-3-Clause License.\n         */\n\n        /** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n\n        /** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n\n        /** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n\n        /** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n\n        /** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n\n        /** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n\n        /** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n        /**\n         * @typedef {Object} WavesurferParams\n         * @property {AudioContext} audioContext=null Use your own previously\n         * initialized AudioContext or leave blank.\n         * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n         * slower.\n         * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n         * initialized ScriptProcessorNode or leave blank.\n         * @property {boolean} autoCenter=true If a scrollbar is present, center the\n         * waveform on current progress\n         * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n         * waveform is centered\n         * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n         * center waveform on current progress\n         * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n         * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n         * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n         * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n         * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n         * also with audio with big duration. For example:\n         * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n         *   wavesurfer.play();\n         *   wavesurfer.setFilter(customFilter);\n         * `\n         * @property {string} backgroundColor=null Change background color of the\n         * waveform container.\n         * @property {number} barHeight=1 The height of the wave bars.\n         * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n         * @property {number} barGap=null The optional spacing between bars of the wave,\n         * if not provided will be calculated in legacy format.\n         * @property {number} barWidth=null Draw the waveform using bars.\n         * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n         * eliminating waveform gaps\n         * @property {boolean} closeAudioContext=false Close and nullify all audio\n         * contexts when the destroy method is called.\n         * @property {!string|HTMLElement} container CSS selector or HTML element where\n         * the waveform should be drawn. This is the only required parameter.\n         * @property {string} cursorColor='#333' The fill color of the cursor indicating\n         * the playhead position.\n         * @property {number} cursorWidth=1 Measured in pixels.\n         * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n         * attributes.\n         * @property {number} duration=null Optional audio length so pre-rendered peaks\n         * can be display immediately for example.\n         * @property {boolean} fillParent=true Whether to fill the entire container or\n         * draw only according to `minPxPerSec`.\n         * @property {boolean} forceDecode=false Force decoding of audio using web audio\n         * when zooming to get a more detailed waveform.\n         * @property {number} height=128 The height of the waveform. Measured in\n         * pixels.\n         * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n         * scrollbar when one would normally be shown.\n         * @property {boolean} interact=true Whether the mouse interaction will be\n         * enabled at initialization. You can switch this parameter at any time later\n         * on.\n         * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n         * looping of selected regions\n         * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n         * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n         * even integer). If the waveform is longer than this value, additional canvases\n         * will be used to render the waveform, which is useful for very large waveforms\n         * that may be too wide for browsers to draw on a single canvas.\n         * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n         * this enables the native controls for the media element\n         * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n         * `'audio'|'video'` ('video' only for `MediaElement`)\n         * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n         * audio.\n         * @property {boolean} normalize=false If true, normalize by the maximum peak\n         * instead of 1.0.\n         * @property {boolean} partialRender=false Use the PeakCache to improve\n         * rendering speed of large waveforms\n         * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n         * calculate display\n         * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n         * register during instantiation, they will be directly initialised unless they\n         * are added with the `deferInit` property set to true.\n         * @property {string} progressColor='#555' The fill color of the part of the\n         * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n         * the progress wave is not rendered at all.\n         * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n         * media element in the DOM when the player is destroyed. This is useful when\n         * reusing an existing media element via the `loadMediaElement` method.\n         * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n         * renderer.\n         * @property {boolean|number} responsive=false If set to `true` resize the\n         * waveform, when the window is resized. This is debounced with a `100ms`\n         * timeout by default. If this parameter is a number it represents that timeout.\n         * @property {boolean} rtl=false If set to `true`, renders waveform from\n         * right-to-left.\n         * @property {boolean} scrollParent=false Whether to scroll the container with a\n         * lengthy waveform. Otherwise the waveform is shrunk to the container width\n         * (see fillParent).\n         * @property {number} skipLength=2 Number of seconds to skip with the\n         * skipForward() and skipBackward() methods.\n         * @property {boolean} splitChannels=false Render with separate waveforms for\n         * the channels of the audio\n         * @property {string} waveColor='#999' The fill color of the waveform after the\n         * cursor.\n         * @property {object} xhr={} XHR options. For example:\n         * `let xhr = {\n         *     cache: 'default',\n         *     mode: 'cors',\n         *     method: 'GET',\n         *     credentials: 'same-origin',\n         *     redirect: 'follow',\n         *     referrer: 'client',\n         *     headers: [\n         *         {\n         *             key: 'Authorization',\n         *             value: 'my-token'\n         *         }\n         *     ]\n         * };`\n         */\n\n        /**\n         * @typedef {Object} PluginDefinition\n         * @desc The Object used to describe a plugin\n         * @example wavesurfer.addPlugin(pluginDefinition);\n         * @property {string} name The name of the plugin, the plugin instance will be\n         * added as a property to the wavesurfer instance under this name\n         * @property {?Object} staticProps The properties that should be added to the\n         * wavesurfer instance as static properties\n         * @property {?boolean} deferInit Don't initialise plugin\n         * automatically\n         * @property {Object} params={} The plugin parameters, they are the first parameter\n         * passed to the plugin class constructor function\n         * @property {PluginClass} instance The plugin instance factory, is called with\n         * the dependency specified in extends. Returns the plugin class.\n         */\n\n        /**\n         * @interface PluginClass\n         *\n         * @desc This is the interface which is implemented by all plugin classes. Note\n         * that this only turns into an observer after being passed through\n         * `wavesurfer.addPlugin`.\n         *\n         * @extends {Observer}\n         */\n\n\n        var PluginClass = /*#__PURE__*/function () {\n          _createClass(PluginClass, [{\n            key: \"create\",\n\n            /**\n             * Plugin definition factory\n             *\n             * This function must be used to create a plugin definition which can be\n             * used by wavesurfer to correctly instantiate the plugin.\n             *\n             * It returns a `PluginDefinition` object representing the plugin.\n             *\n             * @param {Object} params={} The plugin params (specific to the plugin)\n             */\n            value: function create(params) {}\n            /**\n             * Construct the plugin\n             *\n             * @param {Object} params={} The plugin params (specific to the plugin)\n             * @param {Object} ws The wavesurfer instance\n             */\n\n          }]);\n\n          function PluginClass(params, ws) {\n            _classCallCheck(this, PluginClass);\n          }\n          /**\n           * Initialise the plugin\n           *\n           * Start doing something. This is called by\n           * `wavesurfer.initPlugin(pluginName)`\n           */\n\n\n          _createClass(PluginClass, [{\n            key: \"init\",\n            value: function init() {}\n            /**\n             * Destroy the plugin instance\n             *\n             * Stop doing something. This is called by\n             * `wavesurfer.destroyPlugin(pluginName)`\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {}\n          }]);\n\n          return PluginClass;\n        }();\n        /**\n         * WaveSurfer core library class\n         *\n         * @extends {Observer}\n         * @example\n         * const params = {\n         *   container: '#waveform',\n         *   waveColor: 'violet',\n         *   progressColor: 'purple'\n         * };\n         *\n         * // initialise like this\n         * const wavesurfer = WaveSurfer.create(params);\n         *\n         * // or like this ...\n         * const wavesurfer = new WaveSurfer(params);\n         * wavesurfer.init();\n         *\n         * // load audio file\n         * wavesurfer.load('example/media/demo.wav');\n         */\n\n\n        var WaveSurfer = /*#__PURE__*/function (_util$Observer) {\n          _inherits(WaveSurfer, _util$Observer);\n\n          _createClass(WaveSurfer, null, [{\n            key: \"create\",\n\n            /** @private */\n\n            /** @private */\n\n            /**\n             * Instantiate this class, call its `init` function and returns it\n             *\n             * @param {WavesurferParams} params The wavesurfer parameters\n             * @return {Object} WaveSurfer instance\n             * @example const wavesurfer = WaveSurfer.create(params);\n             */\n            value: function create(params) {\n              var wavesurfer = new WaveSurfer(params);\n              return wavesurfer.init();\n            }\n            /**\n             * The library version number is available as a static property of the\n             * WaveSurfer class\n             *\n             * @type {String}\n             * @example\n             * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n             */\n\n          }]);\n          /**\n           * Initialise wavesurfer instance\n           *\n           * @param {WavesurferParams} params Instantiation options for wavesurfer\n           * @example\n           * const wavesurfer = new WaveSurfer(params);\n           * @returns {this} Wavesurfer instance\n           */\n\n\n          function WaveSurfer(params) {\n            var _this;\n\n            _classCallCheck(this, WaveSurfer);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(WaveSurfer).call(this));\n            /**\n             * Extract relevant parameters (or defaults)\n             * @private\n             */\n\n            _this.defaultParams = {\n              audioContext: null,\n              audioScriptProcessor: null,\n              audioRate: 1,\n              autoCenter: true,\n              autoCenterRate: 5,\n              autoCenterImmediately: false,\n              backend: 'WebAudio',\n              backgroundColor: null,\n              barHeight: 1,\n              barRadius: 0,\n              barGap: null,\n              barMinHeight: null,\n              container: null,\n              cursorColor: '#333',\n              cursorWidth: 1,\n              dragSelection: true,\n              drawingContextAttributes: {\n                // Boolean that hints the user agent to reduce the latency\n                // by desynchronizing the canvas paint cycle from the event\n                // loop\n                desynchronized: false\n              },\n              duration: null,\n              fillParent: true,\n              forceDecode: false,\n              height: 128,\n              hideScrollbar: false,\n              interact: true,\n              loopSelection: true,\n              maxCanvasWidth: 4000,\n              mediaContainer: null,\n              mediaControls: false,\n              mediaType: 'audio',\n              minPxPerSec: 20,\n              normalize: false,\n              partialRender: false,\n              pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n              plugins: [],\n              progressColor: '#555',\n              removeMediaElementOnDestroy: true,\n              renderer: _drawer.default,\n              responsive: false,\n              rtl: false,\n              scrollParent: false,\n              skipLength: 2,\n              splitChannels: false,\n              splitChannelsOptions: {\n                overlay: false,\n                channelColors: {},\n                filterChannels: []\n              },\n              waveColor: '#999',\n              xhr: {}\n            };\n            _this.backends = {\n              MediaElement: _mediaelement.default,\n              WebAudio: _webaudio.default,\n              MediaElementWebAudio: _mediaelementWebaudio.default\n            };\n            _this.util = util;\n            _this.params = Object.assign({}, _this.defaultParams, params);\n            /** @private */\n\n            _this.container = 'string' == typeof params.container ? document.querySelector(_this.params.container) : _this.params.container;\n\n            if (!_this.container) {\n              throw new Error('Container element not found');\n            }\n\n            if (_this.params.mediaContainer == null) {\n              /** @private */\n              _this.mediaContainer = _this.container;\n            } else if (typeof _this.params.mediaContainer == 'string') {\n              /** @private */\n              _this.mediaContainer = document.querySelector(_this.params.mediaContainer);\n            } else {\n              /** @private */\n              _this.mediaContainer = _this.params.mediaContainer;\n            }\n\n            if (!_this.mediaContainer) {\n              throw new Error('Media Container element not found');\n            }\n\n            if (_this.params.maxCanvasWidth <= 1) {\n              throw new Error('maxCanvasWidth must be greater than 1');\n            } else if (_this.params.maxCanvasWidth % 2 == 1) {\n              throw new Error('maxCanvasWidth must be an even number');\n            }\n\n            if (_this.params.rtl === true) {\n              util.style(_this.container, {\n                transform: 'rotateY(180deg)'\n              });\n            }\n\n            if (_this.params.backgroundColor) {\n              _this.setBackgroundColor(_this.params.backgroundColor);\n            }\n            /**\n             * @private Used to save the current volume when muting so we can\n             * restore once unmuted\n             * @type {number}\n             */\n\n\n            _this.savedVolume = 0;\n            /**\n             * @private The current muted state\n             * @type {boolean}\n             */\n\n            _this.isMuted = false;\n            /**\n             * @private Will hold a list of event descriptors that need to be\n             * canceled on subsequent loads of audio\n             * @type {Object[]}\n             */\n\n            _this.tmpEvents = [];\n            /**\n             * @private Holds any running audio downloads\n             * @type {Observer}\n             */\n\n            _this.currentRequest = null;\n            /** @private */\n\n            _this.arraybuffer = null;\n            /** @private */\n\n            _this.drawer = null;\n            /** @private */\n\n            _this.backend = null;\n            /** @private */\n\n            _this.peakCache = null; // cache constructor objects\n\n            if (typeof _this.params.renderer !== 'function') {\n              throw new Error('Renderer parameter is invalid');\n            }\n            /**\n             * @private The uninitialised Drawer class\n             */\n\n\n            _this.Drawer = _this.params.renderer;\n            /**\n             * @private The uninitialised Backend class\n             */\n            // Back compat\n\n            if (_this.params.backend == 'AudioElement') {\n              _this.params.backend = 'MediaElement';\n            }\n\n            if ((_this.params.backend == 'WebAudio' || _this.params.backend === 'MediaElementWebAudio') && !_webaudio.default.prototype.supportsWebAudio.call(null)) {\n              _this.params.backend = 'MediaElement';\n            }\n\n            _this.Backend = _this.backends[_this.params.backend];\n            /**\n             * @private map of plugin names that are currently initialised\n             */\n\n            _this.initialisedPluginList = {};\n            /** @private */\n\n            _this.isDestroyed = false;\n            /**\n             * Get the current ready status.\n             *\n             * @example const isReady = wavesurfer.isReady;\n             * @return {boolean}\n             */\n\n            _this.isReady = false; // responsive debounced event listener. If this.params.responsive is not\n            // set, this is never called. Use 100ms or this.params.responsive as\n            // timeout for the debounce function.\n\n            var prevWidth = 0;\n            _this._onResize = util.debounce(function () {\n              if (prevWidth != _this.drawer.wrapper.clientWidth && !_this.params.scrollParent) {\n                prevWidth = _this.drawer.wrapper.clientWidth;\n\n                _this.drawer.fireEvent('redraw');\n              }\n            }, typeof _this.params.responsive === 'number' ? _this.params.responsive : 100);\n            return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n          }\n          /**\n           * Initialise the wave\n           *\n           * @example\n           * var wavesurfer = new WaveSurfer(params);\n           * wavesurfer.init();\n           * @return {this} The wavesurfer instance\n           */\n\n\n          _createClass(WaveSurfer, [{\n            key: \"init\",\n            value: function init() {\n              this.registerPlugins(this.params.plugins);\n              this.createDrawer();\n              this.createBackend();\n              this.createPeakCache();\n              return this;\n            }\n            /**\n             * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n             * this function is called in the init function of wavesurfer\n             *\n             * @param {PluginDefinition[]} plugins An array of plugin definitions\n             * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n             * @return {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"registerPlugins\",\n            value: function registerPlugins(plugins) {\n              var _this2 = this; // first instantiate all the plugins\n\n\n              plugins.forEach(function (plugin) {\n                return _this2.addPlugin(plugin);\n              }); // now run the init functions\n\n              plugins.forEach(function (plugin) {\n                // call init function of the plugin if deferInit is falsey\n                // in that case you would manually use initPlugins()\n                if (!plugin.deferInit) {\n                  _this2.initPlugin(plugin.name);\n                }\n              });\n              this.fireEvent('plugins-registered', plugins);\n              return this;\n            }\n            /**\n             * Get a map of plugin names that are currently initialised\n             *\n             * @example wavesurfer.getPlugins();\n             * @return {Object} Object with plugin names\n             */\n\n          }, {\n            key: \"getActivePlugins\",\n            value: function getActivePlugins() {\n              return this.initialisedPluginList;\n            }\n            /**\n             * Add a plugin object to wavesurfer\n             *\n             * @param {PluginDefinition} plugin A plugin definition\n             * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n             * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n             * @return {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"addPlugin\",\n            value: function addPlugin(plugin) {\n              var _this3 = this;\n\n              if (!plugin.name) {\n                throw new Error('Plugin does not have a name!');\n              }\n\n              if (!plugin.instance) {\n                throw new Error(\"Plugin \".concat(plugin.name, \" does not have an instance property!\"));\n              } // staticProps properties are applied to wavesurfer instance\n\n\n              if (plugin.staticProps) {\n                Object.keys(plugin.staticProps).forEach(function (pluginStaticProp) {\n                  /**\n                   * Properties defined in a plugin definition's `staticProps` property are added as\n                   * staticProps properties of the WaveSurfer instance\n                   */\n                  _this3[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n                });\n              }\n\n              var Instance = plugin.instance; // turn the plugin instance into an observer\n\n              var observerPrototypeKeys = Object.getOwnPropertyNames(util.Observer.prototype);\n              observerPrototypeKeys.forEach(function (key) {\n                Instance.prototype[key] = util.Observer.prototype[key];\n              });\n              /**\n               * Instantiated plugin classes are added as a property of the wavesurfer\n               * instance\n               * @type {Object}\n               */\n\n              this[plugin.name] = new Instance(plugin.params || {}, this);\n              this.fireEvent('plugin-added', plugin.name);\n              return this;\n            }\n            /**\n             * Initialise a plugin\n             *\n             * @param {string} name A plugin name\n             * @emits WaveSurfer#plugin-initialised\n             * @example wavesurfer.initPlugin('minimap');\n             * @return {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"initPlugin\",\n            value: function initPlugin(name) {\n              if (!this[name]) {\n                throw new Error(\"Plugin \".concat(name, \" has not been added yet!\"));\n              }\n\n              if (this.initialisedPluginList[name]) {\n                // destroy any already initialised plugins\n                this.destroyPlugin(name);\n              }\n\n              this[name].init();\n              this.initialisedPluginList[name] = true;\n              this.fireEvent('plugin-initialised', name);\n              return this;\n            }\n            /**\n             * Destroy a plugin\n             *\n             * @param {string} name A plugin name\n             * @emits WaveSurfer#plugin-destroyed\n             * @example wavesurfer.destroyPlugin('minimap');\n             * @returns {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"destroyPlugin\",\n            value: function destroyPlugin(name) {\n              if (!this[name]) {\n                throw new Error(\"Plugin \".concat(name, \" has not been added yet and cannot be destroyed!\"));\n              }\n\n              if (!this.initialisedPluginList[name]) {\n                throw new Error(\"Plugin \".concat(name, \" is not active and cannot be destroyed!\"));\n              }\n\n              if (typeof this[name].destroy !== 'function') {\n                throw new Error(\"Plugin \".concat(name, \" does not have a destroy function!\"));\n              }\n\n              this[name].destroy();\n              delete this.initialisedPluginList[name];\n              this.fireEvent('plugin-destroyed', name);\n              return this;\n            }\n            /**\n             * Destroy all initialised plugins. Convenience function to use when\n             * wavesurfer is removed\n             *\n             * @private\n             */\n\n          }, {\n            key: \"destroyAllPlugins\",\n            value: function destroyAllPlugins() {\n              var _this4 = this;\n\n              Object.keys(this.initialisedPluginList).forEach(function (name) {\n                return _this4.destroyPlugin(name);\n              });\n            }\n            /**\n             * Create the drawer and draw the waveform\n             *\n             * @private\n             * @emits WaveSurfer#drawer-created\n             */\n\n          }, {\n            key: \"createDrawer\",\n            value: function createDrawer() {\n              var _this5 = this;\n\n              this.drawer = new this.Drawer(this.container, this.params);\n              this.drawer.init();\n              this.fireEvent('drawer-created', this.drawer);\n\n              if (this.params.responsive !== false) {\n                window.addEventListener('resize', this._onResize, true);\n                window.addEventListener('orientationchange', this._onResize, true);\n              }\n\n              this.drawer.on('redraw', function () {\n                _this5.drawBuffer();\n\n                _this5.drawer.progress(_this5.backend.getPlayedPercents());\n              }); // Click-to-seek\n\n              this.drawer.on('click', function (e, progress) {\n                setTimeout(function () {\n                  return _this5.seekTo(progress);\n                }, 0);\n              }); // Relay the scroll event from the drawer\n\n              this.drawer.on('scroll', function (e) {\n                if (_this5.params.partialRender) {\n                  _this5.drawBuffer();\n                }\n\n                _this5.fireEvent('scroll', e);\n              });\n            }\n            /**\n             * Create the backend\n             *\n             * @private\n             * @emits WaveSurfer#backend-created\n             */\n\n          }, {\n            key: \"createBackend\",\n            value: function createBackend() {\n              var _this6 = this;\n\n              if (this.backend) {\n                this.backend.destroy();\n              }\n\n              this.backend = new this.Backend(this.params);\n              this.backend.init();\n              this.fireEvent('backend-created', this.backend);\n              this.backend.on('finish', function () {\n                _this6.drawer.progress(_this6.backend.getPlayedPercents());\n\n                _this6.fireEvent('finish');\n              });\n              this.backend.on('play', function () {\n                return _this6.fireEvent('play');\n              });\n              this.backend.on('pause', function () {\n                return _this6.fireEvent('pause');\n              });\n              this.backend.on('audioprocess', function (time) {\n                _this6.drawer.progress(_this6.backend.getPlayedPercents());\n\n                _this6.fireEvent('audioprocess', time);\n              }); // only needed for MediaElement and MediaElementWebAudio backend\n\n              if (this.params.backend === 'MediaElement' || this.params.backend === 'MediaElementWebAudio') {\n                this.backend.on('seek', function () {\n                  _this6.drawer.progress(_this6.backend.getPlayedPercents());\n                });\n                this.backend.on('volume', function () {\n                  var newVolume = _this6.getVolume();\n\n                  _this6.fireEvent('volume', newVolume);\n\n                  if (_this6.backend.isMuted !== _this6.isMuted) {\n                    _this6.isMuted = _this6.backend.isMuted;\n\n                    _this6.fireEvent('mute', _this6.isMuted);\n                  }\n                });\n              }\n            }\n            /**\n             * Create the peak cache\n             *\n             * @private\n             */\n\n          }, {\n            key: \"createPeakCache\",\n            value: function createPeakCache() {\n              if (this.params.partialRender) {\n                this.peakCache = new _peakcache.default();\n              }\n            }\n            /**\n             * Get the duration of the audio clip\n             *\n             * @example const duration = wavesurfer.getDuration();\n             * @return {number} Duration in seconds\n             */\n\n          }, {\n            key: \"getDuration\",\n            value: function getDuration() {\n              return this.backend.getDuration();\n            }\n            /**\n             * Get the current playback position\n             *\n             * @example const currentTime = wavesurfer.getCurrentTime();\n             * @return {number} Playback position in seconds\n             */\n\n          }, {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n              return this.backend.getCurrentTime();\n            }\n            /**\n             * Set the current play time in seconds.\n             *\n             * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n             * seconds, 60 means 1 minute\n             */\n\n          }, {\n            key: \"setCurrentTime\",\n            value: function setCurrentTime(seconds) {\n              if (seconds >= this.getDuration()) {\n                this.seekTo(1);\n              } else {\n                this.seekTo(seconds / this.getDuration());\n              }\n            }\n            /**\n             * Starts playback from the current position. Optional start and end\n             * measured in seconds can be used to set the range of audio to play.\n             *\n             * @param {?number} start Position to start at\n             * @param {?number} end Position to end at\n             * @emits WaveSurfer#interaction\n             * @return {Promise} Result of the backend play method\n             * @example\n             * // play from second 1 to 5\n             * wavesurfer.play(1, 5);\n             */\n\n          }, {\n            key: \"play\",\n            value: function play(start, end) {\n              var _this7 = this;\n\n              this.fireEvent('interaction', function () {\n                return _this7.play(start, end);\n              });\n              return this.backend.play(start, end);\n            }\n            /**\n             * Set a point in seconds for playback to stop at.\n             *\n             * @param {number} position Position (in seconds) to stop at\n             * @version 3.3.0\n             */\n\n          }, {\n            key: \"setPlayEnd\",\n            value: function setPlayEnd(position) {\n              this.backend.setPlayEnd(position);\n            }\n            /**\n             * Stops and pauses playback\n             *\n             * @example wavesurfer.pause();\n             * @return {Promise} Result of the backend pause method\n             */\n\n          }, {\n            key: \"pause\",\n            value: function pause() {\n              if (!this.backend.isPaused()) {\n                return this.backend.pause();\n              }\n            }\n            /**\n             * Toggle playback\n             *\n             * @example wavesurfer.playPause();\n             * @return {Promise} Result of the backend play or pause method\n             */\n\n          }, {\n            key: \"playPause\",\n            value: function playPause() {\n              return this.backend.isPaused() ? this.play() : this.pause();\n            }\n            /**\n             * Get the current playback state\n             *\n             * @example const isPlaying = wavesurfer.isPlaying();\n             * @return {boolean} False if paused, true if playing\n             */\n\n          }, {\n            key: \"isPlaying\",\n            value: function isPlaying() {\n              return !this.backend.isPaused();\n            }\n            /**\n             * Skip backward\n             *\n             * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n             * is used\n             * @example wavesurfer.skipBackward();\n             */\n\n          }, {\n            key: \"skipBackward\",\n            value: function skipBackward(seconds) {\n              this.skip(-seconds || -this.params.skipLength);\n            }\n            /**\n             * Skip forward\n             *\n             * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n             * is used\n             * @example wavesurfer.skipForward();\n             */\n\n          }, {\n            key: \"skipForward\",\n            value: function skipForward(seconds) {\n              this.skip(seconds || this.params.skipLength);\n            }\n            /**\n             * Skip a number of seconds from the current position (use a negative value\n             * to go backwards).\n             *\n             * @param {number} offset Amount to skip back or forwards\n             * @example\n             * // go back 2 seconds\n             * wavesurfer.skip(-2);\n             */\n\n          }, {\n            key: \"skip\",\n            value: function skip(offset) {\n              var duration = this.getDuration() || 1;\n              var position = this.getCurrentTime() || 0;\n              position = Math.max(0, Math.min(duration, position + (offset || 0)));\n              this.seekAndCenter(position / duration);\n            }\n            /**\n             * Seeks to a position and centers the view\n             *\n             * @param {number} progress Between 0 (=beginning) and 1 (=end)\n             * @example\n             * // seek and go to the middle of the audio\n             * wavesurfer.seekTo(0.5);\n             */\n\n          }, {\n            key: \"seekAndCenter\",\n            value: function seekAndCenter(progress) {\n              this.seekTo(progress);\n              this.drawer.recenter(progress);\n            }\n            /**\n             * Seeks to a position\n             *\n             * @param {number} progress Between 0 (=beginning) and 1 (=end)\n             * @emits WaveSurfer#interaction\n             * @emits WaveSurfer#seek\n             * @example\n             * // seek to the middle of the audio\n             * wavesurfer.seekTo(0.5);\n             */\n\n          }, {\n            key: \"seekTo\",\n            value: function seekTo(progress) {\n              var _this8 = this; // return an error if progress is not a number between 0 and 1\n\n\n              if (typeof progress !== 'number' || !isFinite(progress) || progress < 0 || progress > 1) {\n                throw new Error('Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!');\n              }\n\n              this.fireEvent('interaction', function () {\n                return _this8.seekTo(progress);\n              });\n              var paused = this.backend.isPaused(); // avoid draw wrong position while playing backward seeking\n\n              if (!paused) {\n                this.backend.pause();\n              } // avoid small scrolls while paused seeking\n\n\n              var oldScrollParent = this.params.scrollParent;\n              this.params.scrollParent = false;\n              this.backend.seekTo(progress * this.getDuration());\n              this.drawer.progress(progress);\n\n              if (!paused) {\n                this.backend.play();\n              }\n\n              this.params.scrollParent = oldScrollParent;\n              this.fireEvent('seek', progress);\n            }\n            /**\n             * Stops and goes to the beginning.\n             *\n             * @example wavesurfer.stop();\n             */\n\n          }, {\n            key: \"stop\",\n            value: function stop() {\n              this.pause();\n              this.seekTo(0);\n              this.drawer.progress(0);\n            }\n            /**\n             * Sets the ID of the audio device to use for output and returns a Promise.\n             *\n             * @param {string} deviceId String value representing underlying output\n             * device\n             * @returns {Promise} `Promise` that resolves to `undefined` when there are\n             * no errors detected.\n             */\n\n          }, {\n            key: \"setSinkId\",\n            value: function setSinkId(deviceId) {\n              return this.backend.setSinkId(deviceId);\n            }\n            /**\n             * Set the playback volume.\n             *\n             * @param {number} newVolume A value between 0 and 1, 0 being no\n             * volume and 1 being full volume.\n             * @emits WaveSurfer#volume\n             */\n\n          }, {\n            key: \"setVolume\",\n            value: function setVolume(newVolume) {\n              this.backend.setVolume(newVolume);\n              this.fireEvent('volume', newVolume);\n            }\n            /**\n             * Get the playback volume.\n             *\n             * @return {number} A value between 0 and 1, 0 being no\n             * volume and 1 being full volume.\n             */\n\n          }, {\n            key: \"getVolume\",\n            value: function getVolume() {\n              return this.backend.getVolume();\n            }\n            /**\n             * Set the playback rate.\n             *\n             * @param {number} rate A positive number. E.g. 0.5 means half the normal\n             * speed, 2 means double speed and so on.\n             * @example wavesurfer.setPlaybackRate(2);\n             */\n\n          }, {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n              this.backend.setPlaybackRate(rate);\n            }\n            /**\n             * Get the playback rate.\n             *\n             * @return {number} The current playback rate.\n             */\n\n          }, {\n            key: \"getPlaybackRate\",\n            value: function getPlaybackRate() {\n              return this.backend.getPlaybackRate();\n            }\n            /**\n             * Toggle the volume on and off. If not currently muted it will save the\n             * current volume value and turn the volume off. If currently muted then it\n             * will restore the volume to the saved value, and then rest the saved\n             * value.\n             *\n             * @example wavesurfer.toggleMute();\n             */\n\n          }, {\n            key: \"toggleMute\",\n            value: function toggleMute() {\n              this.setMute(!this.isMuted);\n            }\n            /**\n             * Enable or disable muted audio\n             *\n             * @param {boolean} mute Specify `true` to mute audio.\n             * @emits WaveSurfer#volume\n             * @emits WaveSurfer#mute\n             * @example\n             * // unmute\n             * wavesurfer.setMute(false);\n             * console.log(wavesurfer.getMute()) // logs false\n             */\n\n          }, {\n            key: \"setMute\",\n            value: function setMute(mute) {\n              // ignore all muting requests if the audio is already in that state\n              if (mute === this.isMuted) {\n                this.fireEvent('mute', this.isMuted);\n                return;\n              }\n\n              if (this.backend.setMute) {\n                // Backends such as the MediaElement backend have their own handling\n                // of mute, let them handle it.\n                this.backend.setMute(mute);\n                this.isMuted = mute;\n              } else {\n                if (mute) {\n                  // If currently not muted then save current volume,\n                  // turn off the volume and update the mute properties\n                  this.savedVolume = this.backend.getVolume();\n                  this.backend.setVolume(0);\n                  this.isMuted = true;\n                  this.fireEvent('volume', 0);\n                } else {\n                  // If currently muted then restore to the saved volume\n                  // and update the mute properties\n                  this.backend.setVolume(this.savedVolume);\n                  this.isMuted = false;\n                  this.fireEvent('volume', this.savedVolume);\n                }\n              }\n\n              this.fireEvent('mute', this.isMuted);\n            }\n            /**\n             * Get the current mute status.\n             *\n             * @example const isMuted = wavesurfer.getMute();\n             * @return {boolean} Current mute status\n             */\n\n          }, {\n            key: \"getMute\",\n            value: function getMute() {\n              return this.isMuted;\n            }\n            /**\n             * Get the list of current set filters as an array.\n             *\n             * Filters must be set with setFilters method first\n             *\n             * @return {array} List of enabled filters\n             */\n\n          }, {\n            key: \"getFilters\",\n            value: function getFilters() {\n              return this.backend.filters || [];\n            }\n            /**\n             * Toggles `scrollParent` and redraws\n             *\n             * @example wavesurfer.toggleScroll();\n             */\n\n          }, {\n            key: \"toggleScroll\",\n            value: function toggleScroll() {\n              this.params.scrollParent = !this.params.scrollParent;\n              this.drawBuffer();\n            }\n            /**\n             * Toggle mouse interaction\n             *\n             * @example wavesurfer.toggleInteraction();\n             */\n\n          }, {\n            key: \"toggleInteraction\",\n            value: function toggleInteraction() {\n              this.params.interact = !this.params.interact;\n            }\n            /**\n             * Get the fill color of the waveform after the cursor.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getWaveColor\",\n            value: function getWaveColor() {\n              return this.params.waveColor;\n            }\n            /**\n             * Set the fill color of the waveform after the cursor.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setWaveColor('#ddd');\n             */\n\n          }, {\n            key: \"setWaveColor\",\n            value: function setWaveColor(color) {\n              this.params.waveColor = color;\n              this.drawBuffer();\n            }\n            /**\n             * Get the fill color of the waveform behind the cursor.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getProgressColor\",\n            value: function getProgressColor() {\n              return this.params.progressColor;\n            }\n            /**\n             * Set the fill color of the waveform behind the cursor.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setProgressColor('#400');\n             */\n\n          }, {\n            key: \"setProgressColor\",\n            value: function setProgressColor(color) {\n              this.params.progressColor = color;\n              this.drawBuffer();\n            }\n            /**\n             * Get the background color of the waveform container.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getBackgroundColor\",\n            value: function getBackgroundColor() {\n              return this.params.backgroundColor;\n            }\n            /**\n             * Set the background color of the waveform container.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setBackgroundColor('#FF00FF');\n             */\n\n          }, {\n            key: \"setBackgroundColor\",\n            value: function setBackgroundColor(color) {\n              this.params.backgroundColor = color;\n              util.style(this.container, {\n                background: this.params.backgroundColor\n              });\n            }\n            /**\n             * Get the fill color of the cursor indicating the playhead\n             * position.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getCursorColor\",\n            value: function getCursorColor() {\n              return this.params.cursorColor;\n            }\n            /**\n             * Set the fill color of the cursor indicating the playhead\n             * position.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setCursorColor('#222');\n             */\n\n          }, {\n            key: \"setCursorColor\",\n            value: function setCursorColor(color) {\n              this.params.cursorColor = color;\n              this.drawer.updateCursor();\n            }\n            /**\n             * Get the height of the waveform.\n             *\n             * @return {number} Height measured in pixels.\n             */\n\n          }, {\n            key: \"getHeight\",\n            value: function getHeight() {\n              return this.params.height;\n            }\n            /**\n             * Set the height of the waveform.\n             *\n             * @param {number} height Height measured in pixels.\n             * @example wavesurfer.setHeight(200);\n             */\n\n          }, {\n            key: \"setHeight\",\n            value: function setHeight(height) {\n              this.params.height = height;\n              this.drawer.setHeight(height * this.params.pixelRatio);\n              this.drawBuffer();\n            }\n            /**\n             * Hide channels from being drawn on the waveform if splitting channels.\n             *\n             * For example, if we want to draw only the peaks for the right stereo channel:\n             *\n             * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n             * wavesurfer.load('stereo_audio.mp3');\n             *\n             * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n             *\n             * @param {array} channelIndices Channels to be filtered out from drawing.\n             * @version 4.0.0\n             */\n\n          }, {\n            key: \"setFilteredChannels\",\n            value: function setFilteredChannels(channelIndices) {\n              this.params.splitChannelsOptions.filterChannels = channelIndices;\n              this.drawBuffer();\n            }\n            /**\n             * Get the correct peaks for current wave view-port and render wave\n             *\n             * @private\n             * @emits WaveSurfer#redraw\n             */\n\n          }, {\n            key: \"drawBuffer\",\n            value: function drawBuffer() {\n              var nominalWidth = Math.round(this.getDuration() * this.params.minPxPerSec * this.params.pixelRatio);\n              var parentWidth = this.drawer.getWidth();\n              var width = nominalWidth; // always start at 0 after zooming for scrolling : issue redraw left part\n\n              var start = 0;\n              var end = Math.max(start + parentWidth, width); // Fill container\n\n              if (this.params.fillParent && (!this.params.scrollParent || nominalWidth < parentWidth)) {\n                width = parentWidth;\n                start = 0;\n                end = width;\n              }\n\n              var peaks;\n\n              if (this.params.partialRender) {\n                var newRanges = this.peakCache.addRangeToPeakCache(width, start, end);\n                var i;\n\n                for (i = 0; i < newRanges.length; i++) {\n                  peaks = this.backend.getPeaks(width, newRanges[i][0], newRanges[i][1]);\n                  this.drawer.drawPeaks(peaks, width, newRanges[i][0], newRanges[i][1]);\n                }\n              } else {\n                peaks = this.backend.getPeaks(width, start, end);\n                this.drawer.drawPeaks(peaks, width, start, end);\n              }\n\n              this.fireEvent('redraw', peaks, width);\n            }\n            /**\n             * Horizontally zooms the waveform in and out. It also changes the parameter\n             * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n             * with a falsey parameter will reset the zoom state.\n             *\n             * @param {?number} pxPerSec Number of horizontal pixels per second of\n             * audio, if none is set the waveform returns to unzoomed state\n             * @emits WaveSurfer#zoom\n             * @example wavesurfer.zoom(20);\n             */\n\n          }, {\n            key: \"zoom\",\n            value: function zoom(pxPerSec) {\n              if (!pxPerSec) {\n                this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n                this.params.scrollParent = false;\n              } else {\n                this.params.minPxPerSec = pxPerSec;\n                this.params.scrollParent = true;\n              }\n\n              this.drawBuffer();\n              this.drawer.progress(this.backend.getPlayedPercents());\n              this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n              this.fireEvent('zoom', pxPerSec);\n            }\n            /**\n             * Decode buffer and load\n             *\n             * @private\n             * @param {ArrayBuffer} arraybuffer Buffer to process\n             */\n\n          }, {\n            key: \"loadArrayBuffer\",\n            value: function loadArrayBuffer(arraybuffer) {\n              var _this9 = this;\n\n              this.decodeArrayBuffer(arraybuffer, function (data) {\n                if (!_this9.isDestroyed) {\n                  _this9.loadDecodedBuffer(data);\n                }\n              });\n            }\n            /**\n             * Directly load an externally decoded AudioBuffer\n             *\n             * @private\n             * @param {AudioBuffer} buffer Buffer to process\n             * @emits WaveSurfer#ready\n             */\n\n          }, {\n            key: \"loadDecodedBuffer\",\n            value: function loadDecodedBuffer(buffer) {\n              this.backend.load(buffer);\n              this.drawBuffer();\n              this.isReady = true;\n              this.fireEvent('ready');\n            }\n            /**\n             * Loads audio data from a Blob or File object\n             *\n             * @param {Blob|File} blob Audio data\n             * @example\n             */\n\n          }, {\n            key: \"loadBlob\",\n            value: function loadBlob(blob) {\n              var _this10 = this; // Create file reader\n\n\n              var reader = new FileReader();\n              reader.addEventListener('progress', function (e) {\n                return _this10.onProgress(e);\n              });\n              reader.addEventListener('load', function (e) {\n                return _this10.loadArrayBuffer(e.target.result);\n              });\n              reader.addEventListener('error', function () {\n                return _this10.fireEvent('error', 'Error reading file');\n              });\n              reader.readAsArrayBuffer(blob);\n              this.empty();\n            }\n            /**\n             * Loads audio and re-renders the waveform.\n             *\n             * @param {string|HTMLMediaElement} url The url of the audio file or the\n             * audio element with the audio\n             * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n             * the audio to render the waveform if this is specified\n             * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n             * `'none'|'metadata'|'auto'` Preload attribute for the media element\n             * @param {?number} duration The duration of the audio. This is used to\n             * render the peaks data in the correct size for the audio duration (as\n             * befits the current `minPxPerSec` and zoom value) without having to decode\n             * the audio.\n             * @returns {void}\n             * @throws Will throw an error if the `url` argument is empty.\n             * @example\n             * // uses fetch or media element to load file (depending on backend)\n             * wavesurfer.load('http://example.com/demo.wav');\n             *\n             * // setting preload attribute with media element backend and supplying\n             * // peaks\n             * wavesurfer.load(\n             *   'http://example.com/demo.wav',\n             *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n             *   true\n             * );\n             */\n\n          }, {\n            key: \"load\",\n            value: function load(url, peaks, preload, duration) {\n              if (!url) {\n                throw new Error('url parameter cannot be empty');\n              }\n\n              this.empty();\n\n              if (preload) {\n                // check whether the preload attribute will be usable and if not log\n                // a warning listing the reasons why not and nullify the variable\n                var preloadIgnoreReasons = {\n                  \"Preload is not 'auto', 'none' or 'metadata'\": ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                  'Peaks are not provided': !peaks,\n                  \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\": ['MediaElement', 'MediaElementWebAudio'].indexOf(this.params.backend) === -1,\n                  'Url is not of type string': typeof url !== 'string'\n                };\n                var activeReasons = Object.keys(preloadIgnoreReasons).filter(function (reason) {\n                  return preloadIgnoreReasons[reason];\n                });\n\n                if (activeReasons.length) {\n                  // eslint-disable-next-line no-console\n                  console.warn('Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' + activeReasons.join('\\n\\t- ')); // stop invalid values from being used\n\n                  preload = null;\n                }\n              }\n\n              switch (this.params.backend) {\n                case 'WebAudio':\n                  return this.loadBuffer(url, peaks, duration);\n\n                case 'MediaElement':\n                case 'MediaElementWebAudio':\n                  return this.loadMediaElement(url, peaks, preload, duration);\n              }\n            }\n            /**\n             * Loads audio using Web Audio buffer backend.\n             *\n             * @private\n             * @param {string} url URL of audio file\n             * @param {number[]|Number.<Array[]>} peaks Peaks data\n             * @param {?number} duration Optional duration of audio file\n             * @returns {void}\n             */\n\n          }, {\n            key: \"loadBuffer\",\n            value: function loadBuffer(url, peaks, duration) {\n              var _this11 = this;\n\n              var load = function load(action) {\n                if (action) {\n                  _this11.tmpEvents.push(_this11.once('ready', action));\n                }\n\n                return _this11.getArrayBuffer(url, function (data) {\n                  return _this11.loadArrayBuffer(data);\n                });\n              };\n\n              if (peaks) {\n                this.backend.setPeaks(peaks, duration);\n                this.drawBuffer();\n                this.tmpEvents.push(this.once('interaction', load));\n              } else {\n                return load();\n              }\n            }\n            /**\n             * Either create a media element, or load an existing media element.\n             *\n             * @private\n             * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n             * existing HTML5 Audio/Video Element\n             * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n             * dependency\n             * @param {?boolean} preload Set to true if the preload attribute of the\n             * audio element should be enabled\n             * @param {?number} duration Optional duration of audio file\n             */\n\n          }, {\n            key: \"loadMediaElement\",\n            value: function loadMediaElement(urlOrElt, peaks, preload, duration) {\n              var _this12 = this;\n\n              var url = urlOrElt;\n\n              if (typeof urlOrElt === 'string') {\n                this.backend.load(url, this.mediaContainer, peaks, preload);\n              } else {\n                var elt = urlOrElt;\n                this.backend.loadElt(elt, peaks); // If peaks are not provided,\n                // url = element.src so we can get peaks with web audio\n\n                url = elt.src;\n              }\n\n              this.tmpEvents.push(this.backend.once('canplay', function () {\n                // ignore when backend was already destroyed\n                if (!_this12.backend.destroyed) {\n                  _this12.drawBuffer();\n\n                  _this12.isReady = true;\n\n                  _this12.fireEvent('ready');\n                }\n              }), this.backend.once('error', function (err) {\n                return _this12.fireEvent('error', err);\n              })); // If no pre-decoded peaks provided or pre-decoded peaks are\n              // provided with forceDecode flag, attempt to download the\n              // audio file and decode it with Web Audio.\n\n              if (peaks) {\n                this.backend.setPeaks(peaks, duration);\n              }\n\n              if ((!peaks || this.params.forceDecode) && this.backend.supportsWebAudio()) {\n                this.getArrayBuffer(url, function (arraybuffer) {\n                  _this12.decodeArrayBuffer(arraybuffer, function (buffer) {\n                    _this12.backend.buffer = buffer;\n\n                    _this12.backend.setPeaks(null);\n\n                    _this12.drawBuffer();\n\n                    _this12.fireEvent('waveform-ready');\n                  });\n                });\n              }\n            }\n            /**\n             * Decode an array buffer and pass data to a callback\n             *\n             * @private\n             * @param {Object} arraybuffer The array buffer to decode\n             * @param {function} callback The function to call on complete\n             */\n\n          }, {\n            key: \"decodeArrayBuffer\",\n            value: function decodeArrayBuffer(arraybuffer, callback) {\n              var _this13 = this;\n\n              this.arraybuffer = arraybuffer;\n              this.backend.decodeArrayBuffer(arraybuffer, function (data) {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!_this13.isDestroyed && _this13.arraybuffer == arraybuffer) {\n                  callback(data);\n                  _this13.arraybuffer = null;\n                }\n              }, function () {\n                return _this13.fireEvent('error', 'Error decoding audiobuffer');\n              });\n            }\n            /**\n             * Load an array buffer using fetch and pass the result to a callback\n             *\n             * @param {string} url The URL of the file object\n             * @param {function} callback The function to call on complete\n             * @returns {util.fetchFile} fetch call\n             * @private\n             */\n\n          }, {\n            key: \"getArrayBuffer\",\n            value: function getArrayBuffer(url, callback) {\n              var _this14 = this;\n\n              var options = Object.assign({\n                url: url,\n                responseType: 'arraybuffer'\n              }, this.params.xhr);\n              var request = util.fetchFile(options);\n              this.currentRequest = request;\n              this.tmpEvents.push(request.on('progress', function (e) {\n                _this14.onProgress(e);\n              }), request.on('success', function (data) {\n                callback(data);\n                _this14.currentRequest = null;\n              }), request.on('error', function (e) {\n                _this14.fireEvent('error', e);\n\n                _this14.currentRequest = null;\n              }));\n              return request;\n            }\n            /**\n             * Called while the audio file is loading\n             *\n             * @private\n             * @param {Event} e Progress event\n             * @emits WaveSurfer#loading\n             */\n\n          }, {\n            key: \"onProgress\",\n            value: function onProgress(e) {\n              var percentComplete;\n\n              if (e.lengthComputable) {\n                percentComplete = e.loaded / e.total;\n              } else {\n                // Approximate progress with an asymptotic\n                // function, and assume downloads in the 1-3 MB range.\n                percentComplete = e.loaded / (e.loaded + 1000000);\n              }\n\n              this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n            }\n            /**\n             * Exports PCM data into a JSON array and opens in a new window.\n             *\n             * @param {number} length=1024 The scale in which to export the peaks\n             * @param {number} accuracy=10000\n             * @param {?boolean} noWindow Set to true to disable opening a new\n             * window with the JSON\n             * @param {number} start Start index\n             * @param {number} end End index\n             * @return {Promise} Promise that resolves with array of peaks\n             */\n\n          }, {\n            key: \"exportPCM\",\n            value: function exportPCM(length, accuracy, noWindow, start, end) {\n              length = length || 1024;\n              start = start || 0;\n              accuracy = accuracy || 10000;\n              noWindow = noWindow || false;\n              var peaks = this.backend.getPeaks(length, start, end);\n              var arr = [].map.call(peaks, function (val) {\n                return Math.round(val * accuracy) / accuracy;\n              });\n              return new Promise(function (resolve, reject) {\n                var json = JSON.stringify(arr);\n\n                if (!noWindow) {\n                  window.open('data:application/json;charset=utf-8,' + encodeURIComponent(json));\n                }\n\n                resolve(json);\n              });\n            }\n            /**\n             * Save waveform image as data URI.\n             *\n             * The default format is `'image/png'`. Other supported types are\n             * `'image/jpeg'` and `'image/webp'`.\n             *\n             * @param {string} format='image/png' A string indicating the image format.\n             * The default format type is `'image/png'`.\n             * @param {number} quality=1 A number between 0 and 1 indicating the image\n             * quality to use for image formats that use lossy compression such as\n             * `'image/jpeg'`` and `'image/webp'`.\n             * @param {string} type Image data type to return. Either 'dataURL' (default)\n             * or 'blob'.\n             * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n             * a single data URL or an array of data URLs, one for each canvas. When using\n             * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n             * instances, one for each canvas.\n             */\n\n          }, {\n            key: \"exportImage\",\n            value: function exportImage(format, quality, type) {\n              if (!format) {\n                format = 'image/png';\n              }\n\n              if (!quality) {\n                quality = 1;\n              }\n\n              if (!type) {\n                type = 'dataURL';\n              }\n\n              return this.drawer.getImage(format, quality, type);\n            }\n            /**\n             * Cancel any fetch request currently in progress\n             */\n\n          }, {\n            key: \"cancelAjax\",\n            value: function cancelAjax() {\n              if (this.currentRequest && this.currentRequest.controller) {\n                this.currentRequest.controller.abort();\n                this.currentRequest = null;\n              }\n            }\n            /**\n             * @private\n             */\n\n          }, {\n            key: \"clearTmpEvents\",\n            value: function clearTmpEvents() {\n              this.tmpEvents.forEach(function (e) {\n                return e.un();\n              });\n            }\n            /**\n             * Display empty waveform.\n             */\n\n          }, {\n            key: \"empty\",\n            value: function empty() {\n              if (!this.backend.isPaused()) {\n                this.stop();\n                this.backend.disconnectSource();\n              }\n\n              this.isReady = false;\n              this.cancelAjax();\n              this.clearTmpEvents(); // empty drawer\n\n              this.drawer.progress(0);\n              this.drawer.setWidth(0);\n              this.drawer.drawPeaks({\n                length: this.drawer.getWidth()\n              }, 0);\n            }\n            /**\n             * Remove events, elements and disconnect WebAudio nodes.\n             *\n             * @emits WaveSurfer#destroy\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.destroyAllPlugins();\n              this.fireEvent('destroy');\n              this.cancelAjax();\n              this.clearTmpEvents();\n              this.unAll();\n\n              if (this.params.responsive !== false) {\n                window.removeEventListener('resize', this._onResize, true);\n                window.removeEventListener('orientationchange', this._onResize, true);\n              }\n\n              if (this.backend) {\n                this.backend.destroy();\n              }\n\n              if (this.drawer) {\n                this.drawer.destroy();\n              }\n\n              this.isDestroyed = true;\n              this.isReady = false;\n              this.arraybuffer = null;\n            }\n          }]);\n\n          return WaveSurfer;\n        }(util.Observer);\n\n        exports.default = WaveSurfer;\n        WaveSurfer.VERSION = \"4.0.1\";\n        WaveSurfer.util = util;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/webaudio.js\":\n      /*!*************************!*\\\n        !*** ./src/webaudio.js ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcWebaudioJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _defineProperty(obj, key, value) {\n          if (key in obj) {\n            Object.defineProperty(obj, key, {\n              value: value,\n              enumerable: true,\n              configurable: true,\n              writable: true\n            });\n          } else {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        } // using constants to prevent someone writing the string wrong\n\n\n        var PLAYING = 'playing';\n        var PAUSED = 'paused';\n        var FINISHED = 'finished';\n        /**\n         * WebAudio backend\n         *\n         * @extends {Observer}\n         */\n\n        var WebAudio = /*#__PURE__*/function (_util$Observer) {\n          _inherits(WebAudio, _util$Observer);\n\n          _createClass(WebAudio, [{\n            key: \"supportsWebAudio\",\n\n            /** scriptBufferSize: size of the processing buffer */\n\n            /** audioContext: allows to process audio with WebAudio API */\n\n            /** @private */\n\n            /** @private */\n\n            /**\n             * Does the browser support this backend\n             *\n             * @return {boolean} Whether or not this browser supports this backend\n             */\n            value: function supportsWebAudio() {\n              return !!(window.AudioContext || window.webkitAudioContext);\n            }\n            /**\n             * Get the audio context used by this backend or create one\n             *\n             * @return {AudioContext} Existing audio context, or creates a new one\n             */\n\n          }, {\n            key: \"getAudioContext\",\n            value: function getAudioContext() {\n              if (!window.WaveSurferAudioContext) {\n                window.WaveSurferAudioContext = new (window.AudioContext || window.webkitAudioContext)();\n              }\n\n              return window.WaveSurferAudioContext;\n            }\n            /**\n             * Get the offline audio context used by this backend or create one\n             *\n             * @param {number} sampleRate The sample rate to use\n             * @return {OfflineAudioContext} Existing offline audio context, or creates\n             * a new one\n             */\n\n          }, {\n            key: \"getOfflineAudioContext\",\n            value: function getOfflineAudioContext(sampleRate) {\n              if (!window.WaveSurferOfflineAudioContext) {\n                window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 2, sampleRate);\n              }\n\n              return window.WaveSurferOfflineAudioContext;\n            }\n            /**\n             * Construct the backend\n             *\n             * @param {WavesurferParams} params Wavesurfer parameters\n             */\n\n          }]);\n\n          function WebAudio(params) {\n            var _this$stateBehaviors, _this$states;\n\n            var _this;\n\n            _classCallCheck(this, WebAudio);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(WebAudio).call(this));\n            /** @private */\n\n            _this.audioContext = null;\n            _this.offlineAudioContext = null;\n            _this.stateBehaviors = (_this$stateBehaviors = {}, _defineProperty(_this$stateBehaviors, PLAYING, {\n              init: function init() {\n                this.addOnAudioProcess();\n              },\n              getPlayedPercents: function getPlayedPercents() {\n                var duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n              },\n              getCurrentTime: function getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n              }\n            }), _defineProperty(_this$stateBehaviors, PAUSED, {\n              init: function init() {\n                this.removeOnAudioProcess();\n              },\n              getPlayedPercents: function getPlayedPercents() {\n                var duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n              },\n              getCurrentTime: function getCurrentTime() {\n                return this.startPosition;\n              }\n            }), _defineProperty(_this$stateBehaviors, FINISHED, {\n              init: function init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n              },\n              getPlayedPercents: function getPlayedPercents() {\n                return 1;\n              },\n              getCurrentTime: function getCurrentTime() {\n                return this.getDuration();\n              }\n            }), _this$stateBehaviors);\n            _this.params = params;\n            /** ac: Audio Context instance */\n\n            _this.ac = params.audioContext || (_this.supportsWebAudio() ? _this.getAudioContext() : {});\n            /**@private */\n\n            _this.lastPlay = _this.ac.currentTime;\n            /** @private */\n\n            _this.startPosition = 0;\n            /** @private */\n\n            _this.scheduledPause = null;\n            /** @private */\n\n            _this.states = (_this$states = {}, _defineProperty(_this$states, PLAYING, Object.create(_this.stateBehaviors[PLAYING])), _defineProperty(_this$states, PAUSED, Object.create(_this.stateBehaviors[PAUSED])), _defineProperty(_this$states, FINISHED, Object.create(_this.stateBehaviors[FINISHED])), _this$states);\n            /** @private */\n\n            _this.buffer = null;\n            /** @private */\n\n            _this.filters = [];\n            /** gainNode: allows to control audio volume */\n\n            _this.gainNode = null;\n            /** @private */\n\n            _this.mergedPeaks = null;\n            /** @private */\n\n            _this.offlineAc = null;\n            /** @private */\n\n            _this.peaks = null;\n            /** @private */\n\n            _this.playbackRate = 1;\n            /** analyser: provides audio analysis information */\n\n            _this.analyser = null;\n            /** scriptNode: allows processing audio */\n\n            _this.scriptNode = null;\n            /** @private */\n\n            _this.source = null;\n            /** @private */\n\n            _this.splitPeaks = [];\n            /** @private */\n\n            _this.state = null;\n            /** @private */\n\n            _this.explicitDuration = params.duration;\n            /**\n             * Boolean indicating if the backend was destroyed.\n             */\n\n            _this.destroyed = false;\n            return _this;\n          }\n          /**\n           * Initialise the backend, called in `wavesurfer.createBackend()`\n           */\n\n\n          _createClass(WebAudio, [{\n            key: \"init\",\n            value: function init() {\n              this.createVolumeNode();\n              this.createScriptNode();\n              this.createAnalyserNode();\n              this.setState(PAUSED);\n              this.setPlaybackRate(this.params.audioRate);\n              this.setLength(0);\n            }\n            /** @private */\n\n          }, {\n            key: \"disconnectFilters\",\n            value: function disconnectFilters() {\n              if (this.filters) {\n                this.filters.forEach(function (filter) {\n                  filter && filter.disconnect();\n                });\n                this.filters = null; // Reconnect direct path\n\n                this.analyser.connect(this.gainNode);\n              }\n            }\n            /**\n             * @private\n             *\n             * @param {string} state The new state\n             */\n\n          }, {\n            key: \"setState\",\n            value: function setState(state) {\n              if (this.state !== this.states[state]) {\n                this.state = this.states[state];\n                this.state.init.call(this);\n              }\n            }\n            /**\n             * Unpacked `setFilters()`\n             *\n             * @param {...AudioNode} filters One or more filters to set\n             */\n\n          }, {\n            key: \"setFilter\",\n            value: function setFilter() {\n              for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {\n                filters[_key] = arguments[_key];\n              }\n\n              this.setFilters(filters);\n            }\n            /**\n             * Insert custom Web Audio nodes into the graph\n             *\n             * @param {AudioNode[]} filters Packed filters array\n             * @example\n             * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n             * wavesurfer.backend.setFilter(lowpass);\n             */\n\n          }, {\n            key: \"setFilters\",\n            value: function setFilters(filters) {\n              // Remove existing filters\n              this.disconnectFilters(); // Insert filters if filter array not empty\n\n              if (filters && filters.length) {\n                this.filters = filters; // Disconnect direct path before inserting filters\n\n                this.analyser.disconnect(); // Connect each filter in turn\n\n                filters.reduce(function (prev, curr) {\n                  prev.connect(curr);\n                  return curr;\n                }, this.analyser).connect(this.gainNode);\n              }\n            }\n            /** Create ScriptProcessorNode to process audio */\n\n          }, {\n            key: \"createScriptNode\",\n            value: function createScriptNode() {\n              if (this.params.audioScriptProcessor) {\n                this.scriptNode = this.params.audioScriptProcessor;\n              } else {\n                if (this.ac.createScriptProcessor) {\n                  this.scriptNode = this.ac.createScriptProcessor(WebAudio.scriptBufferSize);\n                } else {\n                  this.scriptNode = this.ac.createJavaScriptNode(WebAudio.scriptBufferSize);\n                }\n              }\n\n              this.scriptNode.connect(this.ac.destination);\n            }\n            /** @private */\n\n          }, {\n            key: \"addOnAudioProcess\",\n            value: function addOnAudioProcess() {\n              var _this2 = this;\n\n              this.scriptNode.onaudioprocess = function () {\n                var time = _this2.getCurrentTime();\n\n                if (time >= _this2.getDuration()) {\n                  _this2.setState(FINISHED);\n\n                  _this2.fireEvent('pause');\n                } else if (time >= _this2.scheduledPause) {\n                  _this2.pause();\n                } else if (_this2.state === _this2.states[PLAYING]) {\n                  _this2.fireEvent('audioprocess', time);\n                }\n              };\n            }\n            /** @private */\n\n          }, {\n            key: \"removeOnAudioProcess\",\n            value: function removeOnAudioProcess() {\n              this.scriptNode.onaudioprocess = function () {};\n            }\n            /** Create analyser node to perform audio analysis */\n\n          }, {\n            key: \"createAnalyserNode\",\n            value: function createAnalyserNode() {\n              this.analyser = this.ac.createAnalyser();\n              this.analyser.connect(this.gainNode);\n            }\n            /**\n             * Create the gain node needed to control the playback volume.\n             *\n             */\n\n          }, {\n            key: \"createVolumeNode\",\n            value: function createVolumeNode() {\n              // Create gain node using the AudioContext\n              if (this.ac.createGain) {\n                this.gainNode = this.ac.createGain();\n              } else {\n                this.gainNode = this.ac.createGainNode();\n              } // Add the gain node to the graph\n\n\n              this.gainNode.connect(this.ac.destination);\n            }\n            /**\n             * Set the sink id for the media player\n             *\n             * @param {string} deviceId String value representing audio device id.\n             * @returns {Promise} A Promise that resolves to `undefined` when there\n             * are no errors.\n             */\n\n          }, {\n            key: \"setSinkId\",\n            value: function setSinkId(deviceId) {\n              if (deviceId) {\n                /**\n                 * The webaudio API doesn't currently support setting the device\n                 * output. Here we create an HTMLAudioElement, connect the\n                 * webaudio stream to that element and setSinkId there.\n                 */\n                var audio = new window.Audio();\n\n                if (!audio.setSinkId) {\n                  return Promise.reject(new Error('setSinkId is not supported in your browser'));\n                }\n\n                audio.autoplay = true;\n                var dest = this.ac.createMediaStreamDestination();\n                this.gainNode.disconnect();\n                this.gainNode.connect(dest);\n                audio.srcObject = dest.stream;\n                return audio.setSinkId(deviceId);\n              } else {\n                return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n              }\n            }\n            /**\n             * Set the audio volume\n             *\n             * @param {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"setVolume\",\n            value: function setVolume(value) {\n              this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n            }\n            /**\n             * Get the current volume\n             *\n             * @return {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"getVolume\",\n            value: function getVolume() {\n              return this.gainNode.gain.value;\n            }\n            /**\n             * Decode an array buffer and pass data to a callback\n             *\n             * @private\n             * @param {ArrayBuffer} arraybuffer The array buffer to decode\n             * @param {function} callback The function to call on complete.\n             * @param {function} errback The function to call on error.\n             */\n\n          }, {\n            key: \"decodeArrayBuffer\",\n            value: function decodeArrayBuffer(arraybuffer, callback, errback) {\n              if (!this.offlineAc) {\n                this.offlineAc = this.getOfflineAudioContext(this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100);\n              }\n\n              this.offlineAc.decodeAudioData(arraybuffer, function (data) {\n                return callback(data);\n              }, errback);\n            }\n            /**\n             * Set pre-decoded peaks\n             *\n             * @param {number[]|Number.<Array[]>} peaks Peaks data\n             * @param {?number} duration Explicit duration\n             */\n\n          }, {\n            key: \"setPeaks\",\n            value: function setPeaks(peaks, duration) {\n              if (duration != null) {\n                this.explicitDuration = duration;\n              }\n\n              this.peaks = peaks;\n            }\n            /**\n             * Set the rendered length (different from the length of the audio)\n             *\n             * @param {number} length The rendered length\n             */\n\n          }, {\n            key: \"setLength\",\n            value: function setLength(length) {\n              // No resize, we can preserve the cached peaks.\n              if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n                return;\n              }\n\n              this.splitPeaks = [];\n              this.mergedPeaks = []; // Set the last element of the sparse array so the peak arrays are\n              // appropriately sized for other calculations.\n\n              var channels = this.buffer ? this.buffer.numberOfChannels : 1;\n              var c;\n\n              for (c = 0; c < channels; c++) {\n                this.splitPeaks[c] = [];\n                this.splitPeaks[c][2 * (length - 1)] = 0;\n                this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n              }\n\n              this.mergedPeaks[2 * (length - 1)] = 0;\n              this.mergedPeaks[2 * (length - 1) + 1] = 0;\n            }\n            /**\n             * Compute the max and min value of the waveform when broken into <length> subranges.\n             *\n             * @param {number} length How many subranges to break the waveform into.\n             * @param {number} first First sample in the required range.\n             * @param {number} last Last sample in the required range.\n             * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n             * peaks consisting of (max, min) values for each subrange.\n             */\n\n          }, {\n            key: \"getPeaks\",\n            value: function getPeaks(length, first, last) {\n              if (this.peaks) {\n                return this.peaks;\n              }\n\n              if (!this.buffer) {\n                return [];\n              }\n\n              first = first || 0;\n              last = last || length - 1;\n              this.setLength(length);\n\n              if (!this.buffer) {\n                return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n              }\n              /**\n               * The following snippet fixes a buffering data issue on the Safari\n               * browser which returned undefined It creates the missing buffer based\n               * on 1 channel, 4096 samples and the sampleRate from the current\n               * webaudio context 4096 samples seemed to be the best fit for rendering\n               * will review this code once a stable version of Safari TP is out\n               */\n\n\n              if (!this.buffer.length) {\n                var newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n                this.buffer = newBuffer.buffer;\n              }\n\n              var sampleSize = this.buffer.length / length;\n              var sampleStep = ~~(sampleSize / 10) || 1;\n              var channels = this.buffer.numberOfChannels;\n              var c;\n\n              for (c = 0; c < channels; c++) {\n                var peaks = this.splitPeaks[c];\n                var chan = this.buffer.getChannelData(c);\n                var i = void 0;\n\n                for (i = first; i <= last; i++) {\n                  var start = ~~(i * sampleSize);\n                  var end = ~~(start + sampleSize);\n                  /**\n                   * Initialize the max and min to the first sample of this\n                   * subrange, so that even if the samples are entirely\n                   * on one side of zero, we still return the true max and\n                   * min values in the subrange.\n                   */\n\n                  var min = chan[start];\n                  var max = min;\n                  var j = void 0;\n\n                  for (j = start; j < end; j += sampleStep) {\n                    var value = chan[j];\n\n                    if (value > max) {\n                      max = value;\n                    }\n\n                    if (value < min) {\n                      min = value;\n                    }\n                  }\n\n                  peaks[2 * i] = max;\n                  peaks[2 * i + 1] = min;\n\n                  if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                  }\n\n                  if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                  }\n                }\n              }\n\n              return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n            }\n            /**\n             * Get the position from 0 to 1\n             *\n             * @return {number} Position\n             */\n\n          }, {\n            key: \"getPlayedPercents\",\n            value: function getPlayedPercents() {\n              return this.state.getPlayedPercents.call(this);\n            }\n            /** @private */\n\n          }, {\n            key: \"disconnectSource\",\n            value: function disconnectSource() {\n              if (this.source) {\n                this.source.disconnect();\n              }\n            }\n            /**\n             * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n             */\n\n          }, {\n            key: \"destroyWebAudio\",\n            value: function destroyWebAudio() {\n              this.disconnectFilters();\n              this.disconnectSource();\n              this.gainNode.disconnect();\n              this.scriptNode.disconnect();\n              this.analyser.disconnect(); // close the audioContext if closeAudioContext option is set to true\n\n              if (this.params.closeAudioContext) {\n                // check if browser supports AudioContext.close()\n                if (typeof this.ac.close === 'function' && this.ac.state != 'closed') {\n                  this.ac.close();\n                } // clear the reference to the audiocontext\n\n\n                this.ac = null; // clear the actual audiocontext, either passed as param or the\n                // global singleton\n\n                if (!this.params.audioContext) {\n                  window.WaveSurferAudioContext = null;\n                } else {\n                  this.params.audioContext = null;\n                } // clear the offlineAudioContext\n\n\n                window.WaveSurferOfflineAudioContext = null;\n              }\n            }\n            /**\n             * This is called when wavesurfer is destroyed\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              if (!this.isPaused()) {\n                this.pause();\n              }\n\n              this.unAll();\n              this.buffer = null;\n              this.destroyed = true;\n              this.destroyWebAudio();\n            }\n            /**\n             * Loaded a decoded audio buffer\n             *\n             * @param {Object} buffer Decoded audio buffer to load\n             */\n\n          }, {\n            key: \"load\",\n            value: function load(buffer) {\n              this.startPosition = 0;\n              this.lastPlay = this.ac.currentTime;\n              this.buffer = buffer;\n              this.createSource();\n            }\n            /** @private */\n\n          }, {\n            key: \"createSource\",\n            value: function createSource() {\n              this.disconnectSource();\n              this.source = this.ac.createBufferSource(); // adjust for old browsers\n\n              this.source.start = this.source.start || this.source.noteGrainOn;\n              this.source.stop = this.source.stop || this.source.noteOff;\n              this.source.playbackRate.setValueAtTime(this.playbackRate, this.ac.currentTime);\n              this.source.buffer = this.buffer;\n              this.source.connect(this.analyser);\n            }\n            /**\n             * @private\n             *\n             * some browsers require an explicit call to #resume before they will play back audio\n             */\n\n          }, {\n            key: \"resumeAudioContext\",\n            value: function resumeAudioContext() {\n              if (this.ac.state == 'suspended') {\n                this.ac.resume && this.ac.resume();\n              }\n            }\n            /**\n             * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n             *\n             * @return {boolean} Whether or not this backend is currently paused\n             */\n\n          }, {\n            key: \"isPaused\",\n            value: function isPaused() {\n              return this.state !== this.states[PLAYING];\n            }\n            /**\n             * Used by `wavesurfer.getDuration()`\n             *\n             * @return {number} Duration of loaded buffer\n             */\n\n          }, {\n            key: \"getDuration\",\n            value: function getDuration() {\n              if (this.explicitDuration) {\n                return this.explicitDuration;\n              }\n\n              if (!this.buffer) {\n                return 0;\n              }\n\n              return this.buffer.duration;\n            }\n            /**\n             * Used by `wavesurfer.seekTo()`\n             *\n             * @param {number} start Position to start at in seconds\n             * @param {number} end Position to end at in seconds\n             * @return {{start: number, end: number}} Object containing start and end\n             * positions\n             */\n\n          }, {\n            key: \"seekTo\",\n            value: function seekTo(start, end) {\n              if (!this.buffer) {\n                return;\n              }\n\n              this.scheduledPause = null;\n\n              if (start == null) {\n                start = this.getCurrentTime();\n\n                if (start >= this.getDuration()) {\n                  start = 0;\n                }\n              }\n\n              if (end == null) {\n                end = this.getDuration();\n              }\n\n              this.startPosition = start;\n              this.lastPlay = this.ac.currentTime;\n\n              if (this.state === this.states[FINISHED]) {\n                this.setState(PAUSED);\n              }\n\n              return {\n                start: start,\n                end: end\n              };\n            }\n            /**\n             * Get the playback position in seconds\n             *\n             * @return {number} The playback position in seconds\n             */\n\n          }, {\n            key: \"getPlayedTime\",\n            value: function getPlayedTime() {\n              return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n            }\n            /**\n             * Plays the loaded audio region.\n             *\n             * @param {number} start Start offset in seconds, relative to the beginning\n             * of a clip.\n             * @param {number} end When to stop relative to the beginning of a clip.\n             */\n\n          }, {\n            key: \"play\",\n            value: function play(start, end) {\n              if (!this.buffer) {\n                return;\n              } // need to re-create source on each playback\n\n\n              this.createSource();\n              var adjustedTime = this.seekTo(start, end);\n              start = adjustedTime.start;\n              end = adjustedTime.end;\n              this.scheduledPause = end;\n              this.source.start(0, start);\n              this.resumeAudioContext();\n              this.setState(PLAYING);\n              this.fireEvent('play');\n            }\n            /**\n             * Pauses the loaded audio.\n             */\n\n          }, {\n            key: \"pause\",\n            value: function pause() {\n              this.scheduledPause = null;\n              this.startPosition += this.getPlayedTime();\n              this.source && this.source.stop(0);\n              this.setState(PAUSED);\n              this.fireEvent('pause');\n            }\n            /**\n             * Returns the current time in seconds relative to the audio-clip's\n             * duration.\n             *\n             * @return {number} The current time in seconds\n             */\n\n          }, {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n              return this.state.getCurrentTime.call(this);\n            }\n            /**\n             * Returns the current playback rate. (0=no playback, 1=normal playback)\n             *\n             * @return {number} The current playback rate\n             */\n\n          }, {\n            key: \"getPlaybackRate\",\n            value: function getPlaybackRate() {\n              return this.playbackRate;\n            }\n            /**\n             * Set the audio source playback rate.\n             *\n             * @param {number} value The playback rate to use\n             */\n\n          }, {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(value) {\n              value = value || 1;\n\n              if (this.isPaused()) {\n                this.playbackRate = value;\n              } else {\n                this.pause();\n                this.playbackRate = value;\n                this.play();\n              }\n            }\n            /**\n             * Set a point in seconds for playback to stop at.\n             *\n             * @param {number} end Position to end at\n             * @version 3.3.0\n             */\n\n          }, {\n            key: \"setPlayEnd\",\n            value: function setPlayEnd(end) {\n              this.scheduledPause = end;\n            }\n          }]);\n\n          return WebAudio;\n        }(util.Observer);\n\n        exports.default = WebAudio;\n        WebAudio.scriptBufferSize = 256;\n        module.exports = exports.default;\n        /***/\n      }\n      /******/\n\n    })\n  );\n});","map":null,"metadata":{},"sourceType":"script"}